import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/axisgrid_p.h"
        name: "AxisGrid"
        accessSemantics: "reference"
        prototype: "QQuickShaderEffect"
        exports: [
            "QtGraphs/AxisGrid 6.0",
            "QtGraphs/AxisGrid 6.3",
            "QtGraphs/AxisGrid 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
        Property {
            name: "iResolution"
            type: "QVector3D"
            read: "iResolution"
            notify: "iResolutionChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "smoothing"
            type: "double"
            read: "smoothing"
            write: "setSmoothing"
            notify: "smoothingChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "origo"
            type: "int"
            read: "origo"
            write: "setOrigo"
            notify: "origoChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "barsVisibility"
            type: "QVector4D"
            read: "barsVisibility"
            write: "setBarsVisibility"
            notify: "barsVisibilityChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "gridWidth"
            type: "double"
            read: "gridWidth"
            write: "setGridWidth"
            notify: "gridWidthChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "gridHeight"
            type: "double"
            read: "gridHeight"
            write: "setGridHeight"
            notify: "gridHeightChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "gridMovement"
            type: "QPointF"
            read: "gridMovement"
            write: "setGridMovement"
            notify: "gridMovementChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "minorColor"
            type: "QColor"
            read: "minorColor"
            write: "setMinorColor"
            notify: "minorColorChanged"
            index: 7
            isFinal: true
        }
        Property {
            name: "majorColor"
            type: "QColor"
            read: "majorColor"
            write: "setMajorColor"
            notify: "majorColorChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "minorBarWidth"
            type: "double"
            read: "minorBarWidth"
            write: "setMinorBarWidth"
            notify: "minorBarWidthChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "majorBarWidth"
            type: "double"
            read: "majorBarWidth"
            write: "setMajorBarWidth"
            notify: "majorBarWidthChanged"
            index: 10
            isFinal: true
        }
        Property {
            name: "verticalMinorTickScale"
            type: "double"
            read: "verticalMinorTickScale"
            write: "setVerticalMinorTickScale"
            notify: "verticalMinorTickScaleChanged"
            index: 11
            isFinal: true
        }
        Property {
            name: "horizontalMinorTickScale"
            type: "double"
            read: "horizontalMinorTickScale"
            write: "setHorizontalMinorTickScale"
            notify: "horizontalMinorTickScaleChanged"
            index: 12
            isFinal: true
        }
        Signal { name: "iResolutionChanged" }
        Signal { name: "smoothingChanged" }
        Signal { name: "origoChanged" }
        Signal { name: "barsVisibilityChanged" }
        Signal { name: "gridWidthChanged" }
        Signal { name: "gridHeightChanged" }
        Signal { name: "gridMovementChanged" }
        Signal { name: "minorColorChanged" }
        Signal { name: "majorColorChanged" }
        Signal { name: "minorBarWidthChanged" }
        Signal { name: "majorBarWidthChanged" }
        Signal { name: "verticalMinorTickScaleChanged" }
        Signal { name: "horizontalMinorTickScaleChanged" }
    }
    Component {
        file: "private/axisline_p.h"
        name: "AxisLine"
        accessSemantics: "reference"
        prototype: "QQuickShaderEffect"
        exports: [
            "QtGraphs/AxisLine 6.0",
            "QtGraphs/AxisLine 6.3",
            "QtGraphs/AxisLine 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
        Property {
            name: "iResolution"
            type: "QVector3D"
            read: "iResolution"
            notify: "iResolutionChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "smoothing"
            type: "double"
            read: "smoothing"
            write: "setSmoothing"
            notify: "smoothingChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "lineWidth"
            type: "double"
            read: "lineWidth"
            write: "setLineWidth"
            notify: "lineWidthChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "isHorizontal"
            type: "bool"
            read: "isHorizontal"
            write: "setIsHorizontal"
            notify: "isHorizontalChanged"
            index: 4
            isFinal: true
        }
        Signal { name: "iResolutionChanged" }
        Signal { name: "smoothingChanged" }
        Signal { name: "colorChanged" }
        Signal { name: "lineWidthChanged" }
        Signal { name: "isHorizontalChanged" }
    }
    Component {
        file: "private/axisrenderer_p.h"
        name: "AxisRenderer"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtGraphs/AxisRenderer 6.0",
            "QtGraphs/AxisRenderer 6.3",
            "QtGraphs/AxisRenderer 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
    }
    Component {
        file: "private/axisticker_p.h"
        name: "AxisTicker"
        accessSemantics: "reference"
        prototype: "QQuickShaderEffect"
        exports: [
            "QtGraphs/AxisTicker 6.0",
            "QtGraphs/AxisTicker 6.3",
            "QtGraphs/AxisTicker 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
        Property {
            name: "iResolution"
            type: "QVector3D"
            read: "iResolution"
            notify: "iResolutionChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "smoothing"
            type: "double"
            read: "smoothing"
            write: "setSmoothing"
            notify: "smoothingChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "origo"
            type: "int"
            read: "origo"
            write: "setOrigo"
            notify: "origoChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "minorBarsVisible"
            type: "bool"
            read: "minorBarsVisible"
            write: "setMinorBarsVisible"
            notify: "minorBarsVisibleChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "spacing"
            type: "double"
            read: "spacing"
            write: "setSpacing"
            notify: "spacingChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "barsMovement"
            type: "double"
            read: "barsMovement"
            write: "setBarsMovement"
            notify: "barsMovementChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "minorColor"
            type: "QColor"
            read: "minorColor"
            write: "setMinorColor"
            notify: "minorColorChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "majorColor"
            type: "QColor"
            read: "majorColor"
            write: "setMajorColor"
            notify: "majorColorChanged"
            index: 7
            isFinal: true
        }
        Property {
            name: "minorBarWidth"
            type: "double"
            read: "minorBarWidth"
            write: "setMinorBarWidth"
            notify: "minorBarWidthChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "majorBarWidth"
            type: "double"
            read: "majorBarWidth"
            write: "setMajorBarWidth"
            notify: "majorBarWidthChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "minorTickScale"
            type: "double"
            read: "minorTickScale"
            write: "setMinorTickScale"
            notify: "minorTickScaleChanged"
            index: 10
            isFinal: true
        }
        Property {
            name: "minorBarsLength"
            type: "double"
            read: "minorBarsLength"
            write: "setMinorBarsLength"
            notify: "minorBarsLengthChanged"
            index: 11
            isFinal: true
        }
        Property {
            name: "isHorizontal"
            type: "bool"
            read: "isHorizontal"
            write: "setIsHorizontal"
            notify: "isHorizontalChanged"
            index: 12
            isFinal: true
        }
        Signal { name: "iResolutionChanged" }
        Signal { name: "smoothingChanged" }
        Signal { name: "origoChanged" }
        Signal { name: "minorBarsVisibleChanged" }
        Signal { name: "spacingChanged" }
        Signal { name: "barsMovementChanged" }
        Signal { name: "minorColorChanged" }
        Signal { name: "majorColorChanged" }
        Signal { name: "minorBarWidthChanged" }
        Signal { name: "majorBarWidthChanged" }
        Signal { name: "minorTickScaleChanged" }
        Signal { name: "minorBarsLengthChanged" }
        Signal { name: "isHorizontalChanged" }
    }
    Component {
        file: "private/barsrenderer_p.h"
        name: "BarsRenderer"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtGraphs/BarsRenderer 6.0",
            "QtGraphs/BarsRenderer 6.3",
            "QtGraphs/BarsRenderer 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
    }
    Component {
        file: "private/pointrenderer_p.h"
        name: "PointRenderer"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtGraphs/PointRenderer 6.0",
            "QtGraphs/PointRenderer 6.3",
            "QtGraphs/PointRenderer 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "Q3DInputHandler"
        accessSemantics: "reference"
        prototype: "QAbstract3DInputHandler"
        exports: ["QtGraphs/InputHandler3D 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "rotationEnabled"
            type: "bool"
            read: "isRotationEnabled"
            write: "setRotationEnabled"
            notify: "rotationEnabledChanged"
            index: 0
        }
        Property {
            name: "zoomEnabled"
            type: "bool"
            read: "isZoomEnabled"
            write: "setZoomEnabled"
            notify: "zoomEnabledChanged"
            index: 1
        }
        Property {
            name: "selectionEnabled"
            type: "bool"
            read: "isSelectionEnabled"
            write: "setSelectionEnabled"
            notify: "selectionEnabledChanged"
            index: 2
        }
        Property {
            name: "zoomAtTargetEnabled"
            type: "bool"
            read: "isZoomAtTargetEnabled"
            write: "setZoomAtTargetEnabled"
            notify: "zoomAtTargetEnabledChanged"
            index: 3
        }
        Signal {
            name: "rotationEnabledChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "zoomEnabledChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "selectionEnabledChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "zoomAtTargetEnabledChanged"
            Parameter { name: "enable"; type: "bool" }
        }
    }
    Component {
        file: "q3dscene.h"
        name: "Q3DScene"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/Scene3D 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Property {
            name: "viewport"
            type: "QRect"
            read: "viewport"
            notify: "viewportChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "primarySubViewport"
            type: "QRect"
            read: "primarySubViewport"
            write: "setPrimarySubViewport"
            notify: "primarySubViewportChanged"
            index: 1
        }
        Property {
            name: "secondarySubViewport"
            type: "QRect"
            read: "secondarySubViewport"
            write: "setSecondarySubViewport"
            notify: "secondarySubViewportChanged"
            index: 2
        }
        Property {
            name: "selectionQueryPosition"
            type: "QPoint"
            read: "selectionQueryPosition"
            write: "setSelectionQueryPosition"
            notify: "selectionQueryPositionChanged"
            index: 3
        }
        Property {
            name: "secondarySubviewOnTop"
            type: "bool"
            read: "isSecondarySubviewOnTop"
            write: "setSecondarySubviewOnTop"
            notify: "secondarySubviewOnTopChanged"
            index: 4
        }
        Property {
            name: "slicingActive"
            type: "bool"
            read: "isSlicingActive"
            write: "setSlicingActive"
            notify: "slicingActiveChanged"
            index: 5
        }
        Property {
            name: "devicePixelRatio"
            type: "float"
            read: "devicePixelRatio"
            write: "setDevicePixelRatio"
            notify: "devicePixelRatioChanged"
            index: 6
        }
        Property {
            name: "graphPositionQuery"
            type: "QPoint"
            read: "graphPositionQuery"
            write: "setGraphPositionQuery"
            notify: "graphPositionQueryChanged"
            index: 7
        }
        Property {
            name: "invalidSelectionPoint"
            type: "QPoint"
            read: "invalidSelectionPoint"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "viewportChanged"
            Parameter { name: "viewport"; type: "QRect" }
        }
        Signal {
            name: "primarySubViewportChanged"
            Parameter { name: "subViewport"; type: "QRect" }
        }
        Signal {
            name: "secondarySubViewportChanged"
            Parameter { name: "subViewport"; type: "QRect" }
        }
        Signal {
            name: "secondarySubviewOnTopChanged"
            Parameter { name: "isSecondaryOnTop"; type: "bool" }
        }
        Signal {
            name: "slicingActiveChanged"
            Parameter { name: "isSlicingActive"; type: "bool" }
        }
        Signal {
            name: "devicePixelRatioChanged"
            Parameter { name: "pixelRatio"; type: "float" }
        }
        Signal {
            name: "selectionQueryPositionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "graphPositionQueryChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal { name: "needRender" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "Q3DScene"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "viewport"
            type: "QRect"
            read: "viewport"
            notify: "viewportChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "primarySubViewport"
            type: "QRect"
            read: "primarySubViewport"
            write: "setPrimarySubViewport"
            notify: "primarySubViewportChanged"
            index: 1
        }
        Property {
            name: "secondarySubViewport"
            type: "QRect"
            read: "secondarySubViewport"
            write: "setSecondarySubViewport"
            notify: "secondarySubViewportChanged"
            index: 2
        }
        Property {
            name: "selectionQueryPosition"
            type: "QPoint"
            read: "selectionQueryPosition"
            write: "setSelectionQueryPosition"
            notify: "selectionQueryPositionChanged"
            index: 3
        }
        Property {
            name: "secondarySubviewOnTop"
            type: "bool"
            read: "isSecondarySubviewOnTop"
            write: "setSecondarySubviewOnTop"
            notify: "secondarySubviewOnTopChanged"
            index: 4
        }
        Property {
            name: "slicingActive"
            type: "bool"
            read: "isSlicingActive"
            write: "setSlicingActive"
            notify: "slicingActiveChanged"
            index: 5
        }
        Property {
            name: "devicePixelRatio"
            type: "float"
            read: "devicePixelRatio"
            write: "setDevicePixelRatio"
            notify: "devicePixelRatioChanged"
            index: 6
        }
        Property {
            name: "graphPositionQuery"
            type: "QPoint"
            read: "graphPositionQuery"
            write: "setGraphPositionQuery"
            notify: "graphPositionQueryChanged"
            index: 7
        }
        Property {
            name: "invalidSelectionPoint"
            type: "QPoint"
            read: "invalidSelectionPoint"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "viewportChanged"
            Parameter { name: "viewport"; type: "QRect" }
        }
        Signal {
            name: "primarySubViewportChanged"
            Parameter { name: "subViewport"; type: "QRect" }
        }
        Signal {
            name: "secondarySubViewportChanged"
            Parameter { name: "subViewport"; type: "QRect" }
        }
        Signal {
            name: "secondarySubviewOnTopChanged"
            Parameter { name: "isSecondaryOnTop"; type: "bool" }
        }
        Signal {
            name: "slicingActiveChanged"
            Parameter { name: "isSlicingActive"; type: "bool" }
        }
        Signal {
            name: "devicePixelRatioChanged"
            Parameter { name: "pixelRatio"; type: "float" }
        }
        Signal {
            name: "selectionQueryPositionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "graphPositionQueryChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal { name: "needRender" }
    }
    Component {
        file: "q3dtheme.h"
        name: "Q3DTheme"
        accessSemantics: "reference"
        defaultProperty: "themeChildren"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtGraphs/Theme3D 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "ColorStyle"
            isScoped: true
            values: ["Uniform", "ObjectGradient", "RangeGradient"]
        }
        Enum {
            name: "Theme"
            isScoped: true
            values: [
                "Qt",
                "PrimaryColors",
                "StoneMoss",
                "ArmyBlue",
                "Retro",
                "Ebony",
                "Isabelle",
                "UserDefined"
            ]
        }
        Property {
            name: "colorStyle"
            type: "Q3DTheme::ColorStyle"
            read: "colorStyle"
            write: "setColorStyle"
            notify: "colorStyleChanged"
            index: 0
        }
        Property {
            name: "backgroundColor"
            type: "QColor"
            read: "backgroundColor"
            write: "setBackgroundColor"
            notify: "backgroundColorChanged"
            index: 1
        }
        Property {
            name: "gridLineColor"
            type: "QColor"
            read: "gridLineColor"
            write: "setGridLineColor"
            notify: "gridLineColorChanged"
            index: 2
        }
        Property {
            name: "labelBackgroundColor"
            type: "QColor"
            read: "labelBackgroundColor"
            write: "setLabelBackgroundColor"
            notify: "labelBackgroundColorChanged"
            index: 3
        }
        Property {
            name: "labelTextColor"
            type: "QColor"
            read: "labelTextColor"
            write: "setLabelTextColor"
            notify: "labelTextColorChanged"
            index: 4
        }
        Property {
            name: "lightColor"
            type: "QColor"
            read: "lightColor"
            write: "setLightColor"
            notify: "lightColorChanged"
            index: 5
        }
        Property {
            name: "multiHighlightColor"
            type: "QColor"
            read: "multiHighlightColor"
            write: "setMultiHighlightColor"
            notify: "multiHighlightColorChanged"
            index: 6
        }
        Property {
            name: "singleHighlightColor"
            type: "QColor"
            read: "singleHighlightColor"
            write: "setSingleHighlightColor"
            notify: "singleHighlightColorChanged"
            index: 7
        }
        Property {
            name: "windowColor"
            type: "QColor"
            read: "windowColor"
            write: "setWindowColor"
            notify: "windowColorChanged"
            index: 8
        }
        Property {
            name: "font"
            type: "QFont"
            read: "font"
            write: "setFont"
            notify: "fontChanged"
            index: 9
        }
        Property {
            name: "type"
            type: "Q3DTheme::Theme"
            read: "type"
            write: "setType"
            notify: "typeChanged"
            index: 10
        }
        Property {
            name: "backgroundEnabled"
            type: "bool"
            read: "isBackgroundEnabled"
            write: "setBackgroundEnabled"
            notify: "backgroundEnabledChanged"
            index: 11
        }
        Property {
            name: "gridEnabled"
            type: "bool"
            read: "isGridEnabled"
            write: "setGridEnabled"
            notify: "gridEnabledChanged"
            index: 12
        }
        Property {
            name: "labelBackgroundEnabled"
            type: "bool"
            read: "isLabelBackgroundEnabled"
            write: "setLabelBackgroundEnabled"
            notify: "labelBackgroundEnabledChanged"
            index: 13
        }
        Property {
            name: "labelBorderEnabled"
            type: "bool"
            read: "isLabelBorderEnabled"
            write: "setLabelBorderEnabled"
            notify: "labelBorderEnabledChanged"
            index: 14
        }
        Property {
            name: "labelsEnabled"
            type: "bool"
            read: "isLabelsEnabled"
            write: "setLabelsEnabled"
            notify: "labelsEnabledChanged"
            index: 15
        }
        Property {
            name: "ambientLightStrength"
            type: "float"
            read: "ambientLightStrength"
            write: "setAmbientLightStrength"
            notify: "ambientLightStrengthChanged"
            index: 16
        }
        Property {
            name: "lightStrength"
            type: "float"
            read: "lightStrength"
            write: "setLightStrength"
            notify: "lightStrengthChanged"
            index: 17
        }
        Property {
            name: "shadowStrength"
            type: "float"
            read: "shadowStrength"
            write: "setShadowStrength"
            notify: "shadowStrengthChanged"
            index: 18
        }
        Property {
            name: "themeChildren"
            type: "QObject"
            isList: true
            read: "themeChildren"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baseColors"
            type: "QQuickGraphsColor"
            isList: true
            read: "baseColorsQML"
            index: 20
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baseGradients"
            type: "QObject"
            isList: true
            read: "baseGradientsQML"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "singleHighlightGradient"
            type: "QJSValue"
            read: "singleHighlightGradientQML"
            write: "setSingleHighlightGradient"
            notify: "singleHighlightGradientQMLChanged"
            index: 22
        }
        Property {
            name: "multiHighlightGradient"
            type: "QJSValue"
            read: "multiHighlightGradientQML"
            write: "setMultiHighlightGradient"
            notify: "multiHighlightGradientChangedQML"
            index: 23
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "themeType"; type: "Q3DTheme::Theme" }
        }
        Signal {
            name: "baseColorsChanged"
            Parameter { name: "colors"; type: "QColor"; isList: true }
        }
        Signal {
            name: "backgroundColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "windowColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "labelTextColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "labelBackgroundColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "gridLineColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "singleHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "multiHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "lightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "baseGradientsChanged"
            Parameter { name: "gradients"; type: "QLinearGradient"; isList: true }
        }
        Signal {
            name: "singleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Signal {
            name: "multiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Signal {
            name: "lightStrengthChanged"
            Parameter { name: "strength"; type: "float" }
        }
        Signal {
            name: "ambientLightStrengthChanged"
            Parameter { name: "strength"; type: "float" }
        }
        Signal {
            name: "labelBorderEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "backgroundEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "gridEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "labelBackgroundEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "colorStyleChanged"
            Parameter { name: "style"; type: "Q3DTheme::ColorStyle" }
        }
        Signal {
            name: "labelsEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "shadowStrengthChanged"
            Parameter { name: "strength"; type: "float" }
        }
        Signal {
            name: "singleHighlightGradientQMLChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "multiHighlightGradientChangedQML"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal { name: "needRender" }
        Method {
            name: "handleTypeChange"
            Parameter { name: "themeType"; type: "Q3DTheme::Theme" }
        }
        Method { name: "handleBaseColorUpdate" }
        Method { name: "handleBaseGradientUpdate" }
        Method { name: "handleSingleHLGradientUpdate" }
        Method { name: "handleMultiHLGradientUpdate" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QAbstract3DAxis"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/AbstractAxis3D 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "AxisOrientation"
            isScoped: true
            values: ["None", "X", "Y", "Z"]
        }
        Enum {
            name: "AxisType"
            isScoped: true
            values: ["None", "Category", "Value"]
        }
        Property {
            name: "title"
            type: "QString"
            read: "title"
            write: "setTitle"
            notify: "titleChanged"
            index: 0
        }
        Property {
            name: "labels"
            type: "QStringList"
            read: "labels"
            write: "setLabels"
            notify: "labelsChanged"
            index: 1
        }
        Property {
            name: "orientation"
            type: "QAbstract3DAxis::AxisOrientation"
            read: "orientation"
            notify: "orientationChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "type"
            type: "QAbstract3DAxis::AxisType"
            read: "type"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property { name: "min"; type: "float"; read: "min"; write: "setMin"; notify: "minChanged"; index: 4 }
        Property { name: "max"; type: "float"; read: "max"; write: "setMax"; notify: "maxChanged"; index: 5 }
        Property {
            name: "autoAdjustRange"
            type: "bool"
            read: "isAutoAdjustRange"
            write: "setAutoAdjustRange"
            notify: "autoAdjustRangeChanged"
            index: 6
        }
        Property {
            name: "labelAutoRotation"
            type: "float"
            read: "labelAutoRotation"
            write: "setLabelAutoRotation"
            notify: "labelAutoRotationChanged"
            index: 7
        }
        Property {
            name: "titleVisible"
            type: "bool"
            read: "isTitleVisible"
            write: "setTitleVisible"
            notify: "titleVisibilityChanged"
            index: 8
        }
        Property {
            name: "titleFixed"
            type: "bool"
            read: "isTitleFixed"
            write: "setTitleFixed"
            notify: "titleFixedChanged"
            index: 9
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "newTitle"; type: "QString" }
        }
        Signal { name: "labelsChanged" }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "QAbstract3DAxis::AxisOrientation" }
        }
        Signal {
            name: "minChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "float" }
            Parameter { name: "max"; type: "float" }
        }
        Signal {
            name: "autoAdjustRangeChanged"
            Parameter { name: "autoAdjust"; type: "bool" }
        }
        Signal {
            name: "labelAutoRotationChanged"
            Parameter { name: "angle"; type: "float" }
        }
        Signal {
            name: "titleVisibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "titleFixedChanged"
            Parameter { name: "fixed"; type: "bool" }
        }
    }
    Component {
        file: "qabstract3dgraph.h"
        name: "QAbstract3DGraph"
        accessSemantics: "reference"
        prototype: "QQuickWidget"
        exports: ["QtGraphs/AbstractGraph3D 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "SelectionFlag"
            isFlag: true
            values: [
                "SelectionNone",
                "SelectionItem",
                "SelectionRow",
                "SelectionItemAndRow",
                "SelectionColumn",
                "SelectionItemAndColumn",
                "SelectionRowAndColumn",
                "SelectionItemRowAndColumn",
                "SelectionSlice",
                "SelectionMultiSeries"
            ]
        }
        Enum {
            name: "ShadowQuality"
            isScoped: true
            values: [
                "None",
                "Low",
                "Medium",
                "High",
                "SoftLow",
                "SoftMedium",
                "SoftHigh"
            ]
        }
        Enum {
            name: "ElementType"
            isScoped: true
            values: [
                "None",
                "Series",
                "AxisXLabel",
                "AxisYLabel",
                "AxisZLabel",
                "CustomItem"
            ]
        }
        Enum {
            name: "OptimizationHint"
            isScoped: true
            values: ["Default", "Legacy"]
        }
        Enum {
            name: "RenderingMode"
            isScoped: true
            values: ["DirectToBackground", "Indirect"]
        }
        Enum {
            name: "CameraPreset"
            isScoped: true
            values: [
                "NoPreset",
                "FrontLow",
                "Front",
                "FrontHigh",
                "LeftLow",
                "Left",
                "LeftHigh",
                "RightLow",
                "Right",
                "RightHigh",
                "BehindLow",
                "Behind",
                "BehindHigh",
                "IsometricLeft",
                "IsometricLeftHigh",
                "IsometricRight",
                "IsometricRightHigh",
                "DirectlyAbove",
                "DirectlyAboveCW45",
                "DirectlyAboveCCW45",
                "FrontBelow",
                "LeftBelow",
                "RightBelow",
                "BehindBelow",
                "DirectlyBelow"
            ]
        }
        Property {
            name: "activeInputHandler"
            type: "QAbstract3DInputHandler"
            isPointer: true
            read: "activeInputHandler"
            write: "setActiveInputHandler"
            notify: "activeInputHandlerChanged"
            index: 0
        }
        Property {
            name: "activeTheme"
            type: "Q3DTheme"
            isPointer: true
            read: "activeTheme"
            write: "setActiveTheme"
            notify: "activeThemeChanged"
            index: 1
        }
        Property {
            name: "selectionMode"
            type: "QAbstract3DGraph::SelectionFlags"
            read: "selectionMode"
            write: "setSelectionMode"
            notify: "selectionModeChanged"
            index: 2
        }
        Property {
            name: "shadowQuality"
            type: "QAbstract3DGraph::ShadowQuality"
            read: "shadowQuality"
            write: "setShadowQuality"
            notify: "shadowQualityChanged"
            index: 3
        }
        Property {
            name: "scene"
            type: "Q3DScene"
            isPointer: true
            read: "scene"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "measureFps"
            type: "bool"
            read: "measureFps"
            write: "setMeasureFps"
            notify: "measureFpsChanged"
            index: 5
        }
        Property {
            name: "currentFps"
            type: "int"
            read: "currentFps"
            notify: "currentFpsChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "orthoProjection"
            type: "bool"
            read: "isOrthoProjection"
            write: "setOrthoProjection"
            notify: "orthoProjectionChanged"
            index: 7
        }
        Property {
            name: "selectedElement"
            type: "QAbstract3DGraph::ElementType"
            read: "selectedElement"
            notify: "selectedElementChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "aspectRatio"
            type: "double"
            read: "aspectRatio"
            write: "setAspectRatio"
            notify: "aspectRatioChanged"
            index: 9
        }
        Property {
            name: "optimizationHint"
            type: "QAbstract3DGraph::OptimizationHint"
            read: "optimizationHint"
            write: "setOptimizationHint"
            notify: "optimizationHintChanged"
            index: 10
        }
        Property {
            name: "polar"
            type: "bool"
            read: "isPolar"
            write: "setPolar"
            notify: "polarChanged"
            index: 11
        }
        Property {
            name: "radialLabelOffset"
            type: "float"
            read: "radialLabelOffset"
            write: "setRadialLabelOffset"
            notify: "radialLabelOffsetChanged"
            index: 12
        }
        Property {
            name: "horizontalAspectRatio"
            type: "double"
            read: "horizontalAspectRatio"
            write: "setHorizontalAspectRatio"
            notify: "horizontalAspectRatioChanged"
            index: 13
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            notify: "localeChanged"
            index: 14
        }
        Property {
            name: "queriedGraphPosition"
            type: "QVector3D"
            read: "queriedGraphPosition"
            notify: "queriedGraphPositionChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "margin"
            type: "double"
            read: "margin"
            write: "setMargin"
            notify: "marginChanged"
            index: 16
        }
        Property {
            name: "cameraPreset"
            type: "QAbstract3DGraph::CameraPreset"
            read: "cameraPreset"
            write: "setCameraPreset"
            notify: "cameraPresetChanged"
            index: 17
        }
        Property {
            name: "cameraXRotation"
            type: "float"
            read: "cameraXRotation"
            write: "setCameraXRotation"
            notify: "cameraXRotationChanged"
            index: 18
        }
        Property {
            name: "cameraYRotation"
            type: "float"
            read: "cameraYRotation"
            write: "setCameraYRotation"
            notify: "cameraYRotationChanged"
            index: 19
        }
        Property {
            name: "cameraZoomLevel"
            type: "float"
            read: "cameraZoomLevel"
            write: "setCameraZoomLevel"
            notify: "cameraZoomLevelChanged"
            index: 20
        }
        Property {
            name: "minCameraZoomLevel"
            type: "float"
            read: "minCameraZoomLevel"
            write: "setMinCameraZoomLevel"
            notify: "minCameraZoomLevelChanged"
            index: 21
        }
        Property {
            name: "maxCameraZoomLevel"
            type: "float"
            read: "maxCameraZoomLevel"
            write: "setMaxCameraZoomLevel"
            notify: "maxCameraZoomLevelChanged"
            index: 22
        }
        Property {
            name: "wrapCameraXRotation"
            type: "bool"
            read: "wrapCameraXRotation"
            write: "setWrapCameraXRotation"
            notify: "wrapCameraXRotationChanged"
            index: 23
        }
        Property {
            name: "wrapCameraYRotation"
            type: "bool"
            read: "wrapCameraYRotation"
            write: "setWrapCameraYRotation"
            notify: "wrapCameraYRotationChanged"
            index: 24
        }
        Property {
            name: "cameraTargetPosition"
            type: "QVector3D"
            read: "cameraTargetPosition"
            write: "setCameraTargetPosition"
            notify: "cameraTargetPositionChanged"
            index: 25
        }
        Property {
            name: "msaaSamples"
            type: "int"
            read: "msaaSamples"
            write: "setMsaaSamples"
            notify: "msaaSamplesChanged"
            index: 26
        }
        Signal {
            name: "activeInputHandlerChanged"
            Parameter { name: "inputHandler"; type: "QAbstract3DInputHandler"; isPointer: true }
        }
        Signal {
            name: "activeThemeChanged"
            Parameter { name: "activeTheme"; type: "Q3DTheme"; isPointer: true }
        }
        Signal {
            name: "shadowQualityChanged"
            Parameter { name: "quality"; type: "QAbstract3DGraph::ShadowQuality" }
        }
        Signal {
            name: "selectionModeChanged"
            Parameter { name: "selectionMode"; type: "QAbstract3DGraph::SelectionFlags" }
        }
        Signal {
            name: "selectedElementChanged"
            Parameter { name: "type"; type: "QAbstract3DGraph::ElementType" }
        }
        Signal {
            name: "measureFpsChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "currentFpsChanged"
            Parameter { name: "fps"; type: "int" }
        }
        Signal {
            name: "orthoProjectionChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "aspectRatioChanged"
            Parameter { name: "ratio"; type: "double" }
        }
        Signal {
            name: "optimizationHintChanged"
            Parameter { name: "hint"; type: "QAbstract3DGraph::OptimizationHint" }
        }
        Signal {
            name: "polarChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "radialLabelOffsetChanged"
            Parameter { name: "offset"; type: "float" }
        }
        Signal {
            name: "horizontalAspectRatioChanged"
            Parameter { name: "ratio"; type: "double" }
        }
        Signal {
            name: "localeChanged"
            Parameter { name: "locale"; type: "QLocale" }
        }
        Signal {
            name: "queriedGraphPositionChanged"
            Parameter { name: "data"; type: "QVector3D" }
        }
        Signal {
            name: "marginChanged"
            Parameter { name: "margin"; type: "double" }
        }
        Signal {
            name: "cameraPresetChanged"
            Parameter { name: "preset"; type: "QAbstract3DGraph::CameraPreset" }
        }
        Signal {
            name: "cameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "cameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "cameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "cameraTargetPositionChanged"
            Parameter { name: "target"; type: "QVector3D" }
        }
        Signal {
            name: "minCameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "maxCameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "minCameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "minCameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "maxCameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "maxCameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "wrapCameraXRotationChanged"
            Parameter { name: "wrap"; type: "bool" }
        }
        Signal {
            name: "wrapCameraYRotationChanged"
            Parameter { name: "wrap"; type: "bool" }
        }
        Signal {
            name: "msaaSamplesChanged"
            Parameter { name: "samples"; type: "int" }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QAbstract3DInputHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/AbstractInputHandler3D 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "InputView"
            isScoped: true
            values: ["None", "OnPrimary", "OnSecondary"]
        }
        Property {
            name: "inputView"
            type: "QAbstract3DInputHandler::InputView"
            read: "inputView"
            write: "setInputView"
            notify: "inputViewChanged"
            index: 0
        }
        Property {
            name: "inputPosition"
            type: "QPoint"
            read: "inputPosition"
            write: "setInputPosition"
            notify: "positionChanged"
            index: 1
        }
        Property {
            name: "scene"
            type: "Q3DScene"
            isPointer: true
            read: "scene"
            write: "setScene"
            notify: "sceneChanged"
            index: 2
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "inputViewChanged"
            Parameter { name: "view"; type: "QAbstract3DInputHandler::InputView" }
        }
        Signal {
            name: "sceneChanged"
            Parameter { name: "scene"; type: "Q3DScene"; isPointer: true }
        }
        Method {
            name: "handleSelection"
            Parameter { name: "position"; type: "QPoint" }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QAbstract3DSeries"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/Abstract3DSeries 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "SeriesType"
            isScoped: true
            values: ["None", "Bar", "Scatter", "Surface"]
        }
        Enum {
            name: "Mesh"
            isScoped: true
            values: [
                "UserDefined",
                "Bar",
                "Cube",
                "Pyramid",
                "Cone",
                "Cylinder",
                "BevelBar",
                "BevelCube",
                "Sphere",
                "Minimal",
                "Arrow",
                "Point"
            ]
        }
        Property {
            name: "type"
            type: "QAbstract3DSeries::SeriesType"
            read: "type"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "itemLabelFormat"
            type: "QString"
            read: "itemLabelFormat"
            write: "setItemLabelFormat"
            notify: "itemLabelFormatChanged"
            index: 1
        }
        Property {
            name: "visible"
            type: "bool"
            read: "isVisible"
            write: "setVisible"
            notify: "visibilityChanged"
            index: 2
        }
        Property {
            name: "mesh"
            type: "QAbstract3DSeries::Mesh"
            read: "mesh"
            write: "setMesh"
            notify: "meshChanged"
            index: 3
        }
        Property {
            name: "meshSmooth"
            type: "bool"
            read: "isMeshSmooth"
            write: "setMeshSmooth"
            notify: "meshSmoothChanged"
            index: 4
        }
        Property {
            name: "meshRotation"
            type: "QQuaternion"
            read: "meshRotation"
            write: "setMeshRotation"
            notify: "meshRotationChanged"
            index: 5
        }
        Property {
            name: "userDefinedMesh"
            type: "QString"
            read: "userDefinedMesh"
            write: "setUserDefinedMesh"
            notify: "userDefinedMeshChanged"
            index: 6
        }
        Property {
            name: "colorStyle"
            type: "Q3DTheme::ColorStyle"
            read: "colorStyle"
            write: "setColorStyle"
            notify: "colorStyleChanged"
            index: 7
        }
        Property {
            name: "baseColor"
            type: "QColor"
            read: "baseColor"
            write: "setBaseColor"
            notify: "baseColorChanged"
            index: 8
        }
        Property {
            name: "baseGradient"
            type: "QLinearGradient"
            read: "baseGradient"
            write: "setBaseGradient"
            notify: "baseGradientChanged"
            index: 9
        }
        Property {
            name: "singleHighlightColor"
            type: "QColor"
            read: "singleHighlightColor"
            write: "setSingleHighlightColor"
            notify: "singleHighlightColorChanged"
            index: 10
        }
        Property {
            name: "singleHighlightGradient"
            type: "QLinearGradient"
            read: "singleHighlightGradient"
            write: "setSingleHighlightGradient"
            notify: "singleHighlightGradientChanged"
            index: 11
        }
        Property {
            name: "multiHighlightColor"
            type: "QColor"
            read: "multiHighlightColor"
            write: "setMultiHighlightColor"
            notify: "multiHighlightColorChanged"
            index: 12
        }
        Property {
            name: "multiHighlightGradient"
            type: "QLinearGradient"
            read: "multiHighlightGradient"
            write: "setMultiHighlightGradient"
            notify: "multiHighlightGradientChanged"
            index: 13
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 14
        }
        Property {
            name: "itemLabel"
            type: "QString"
            read: "itemLabel"
            notify: "itemLabelChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "itemLabelVisible"
            type: "bool"
            read: "isItemLabelVisible"
            write: "setItemLabelVisible"
            notify: "itemLabelVisibilityChanged"
            index: 16
        }
        Signal {
            name: "itemLabelFormatChanged"
            Parameter { name: "format"; type: "QString" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "meshChanged"
            Parameter { name: "mesh"; type: "QAbstract3DSeries::Mesh" }
        }
        Signal {
            name: "meshSmoothChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "meshRotationChanged"
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Signal {
            name: "userDefinedMeshChanged"
            Parameter { name: "fileName"; type: "QString" }
        }
        Signal {
            name: "colorStyleChanged"
            Parameter { name: "style"; type: "Q3DTheme::ColorStyle" }
        }
        Signal {
            name: "baseColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "baseGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Signal {
            name: "singleHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "singleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Signal {
            name: "multiHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "multiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "QString" }
        }
        Signal {
            name: "itemLabelChanged"
            Parameter { name: "label"; type: "QString" }
        }
        Signal {
            name: "itemLabelVisibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setMeshAxisAndAngle"
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "angle"; type: "float" }
        }
    }
    Component {
        file: "qabstractaxis.h"
        name: "QAbstractAxis"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/AbstractAxis 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Property {
            name: "visible"
            type: "bool"
            read: "isVisible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 0
        }
        Property {
            name: "lineVisible"
            type: "bool"
            read: "isLineVisible"
            write: "setLineVisible"
            notify: "lineVisibleChanged"
            index: 1
        }
        Property {
            name: "labelsVisible"
            type: "bool"
            read: "labelsVisible"
            write: "setLabelsVisible"
            notify: "labelsVisibleChanged"
            index: 2
        }
        Property {
            name: "labelsAngle"
            type: "double"
            read: "labelsAngle"
            write: "setLabelsAngle"
            notify: "labelsAngleChanged"
            index: 3
        }
        Property {
            name: "gridVisible"
            type: "bool"
            read: "isGridLineVisible"
            write: "setGridLineVisible"
            notify: "gridVisibleChanged"
            index: 4
        }
        Property {
            name: "minorGridVisible"
            type: "bool"
            read: "isMinorGridLineVisible"
            write: "setMinorGridLineVisible"
            notify: "minorGridVisibleChanged"
            index: 5
        }
        Property {
            name: "titleText"
            type: "QString"
            read: "titleText"
            write: "setTitleText"
            notify: "titleTextChanged"
            index: 6
        }
        Property {
            name: "titleColor"
            type: "QColor"
            read: "titleColor"
            write: "setTitleColor"
            notify: "titleColorChanged"
            index: 7
        }
        Property {
            name: "titleVisible"
            type: "bool"
            read: "isTitleVisible"
            write: "setTitleVisible"
            notify: "titleVisibleChanged"
            index: 8
        }
        Property {
            name: "titleFont"
            type: "QFont"
            read: "titleFont"
            write: "setTitleFont"
            notify: "titleFontChanged"
            index: 9
        }
        Property {
            name: "orientation"
            type: "Qt::Orientation"
            read: "orientation"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "alignment"
            type: "Qt::Alignment"
            read: "alignment"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "lineVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "labelsVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "labelsAngleChanged"
            Parameter { name: "angle"; type: "double" }
        }
        Signal {
            name: "gridVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "minorGridVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "titleTextChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "titleColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "titleVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "titleFontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal { name: "update" }
    }
    Component {
        file: "qabstractbarseries.h"
        name: "QAbstractBarSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QAbstractSeries"
        Enum {
            name: "LabelsPosition"
            values: [
                "LabelsCenter",
                "LabelsInsideEnd",
                "LabelsInsideBase",
                "LabelsOutsideEnd"
            ]
        }
        Property {
            name: "barWidth"
            type: "double"
            read: "barWidth"
            write: "setBarWidth"
            notify: "barWidthChanged"
            index: 0
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "labelsVisible"
            type: "bool"
            read: "isLabelsVisible"
            write: "setLabelsVisible"
            notify: "labelsVisibleChanged"
            index: 2
        }
        Property {
            name: "labelsFormat"
            type: "QString"
            read: "labelsFormat"
            write: "setLabelsFormat"
            notify: "labelsFormatChanged"
            index: 3
        }
        Property {
            name: "labelsPosition"
            type: "LabelsPosition"
            read: "labelsPosition"
            write: "setLabelsPosition"
            notify: "labelsPositionChanged"
            index: 4
        }
        Property {
            name: "labelsAngle"
            type: "double"
            read: "labelsAngle"
            write: "setLabelsAngle"
            notify: "labelsAngleChanged"
            index: 5
        }
        Property {
            name: "labelsPrecision"
            type: "int"
            read: "labelsPrecision"
            write: "setLabelsPrecision"
            notify: "labelsPrecisionChanged"
            index: 6
        }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "hovered"
            Parameter { name: "status"; type: "bool" }
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "pressed"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "barset"; type: "QBarSet"; isPointer: true }
        }
        Signal { name: "countChanged" }
        Signal { name: "barWidthChanged" }
        Signal { name: "labelsVisibleChanged" }
        Signal {
            name: "labelsFormatChanged"
            Parameter { name: "format"; type: "QString" }
        }
        Signal {
            name: "labelsPositionChanged"
            Parameter { name: "position"; type: "QAbstractBarSeries::LabelsPosition" }
        }
        Signal {
            name: "labelsAngleChanged"
            Parameter { name: "angle"; type: "double" }
        }
        Signal {
            name: "labelsPrecisionChanged"
            Parameter { name: "precision"; type: "int" }
        }
        Signal {
            name: "barsetsAdded"
            Parameter { name: "sets"; type: "QList<QBarSet*>" }
        }
        Signal {
            name: "barsetsRemoved"
            Parameter { name: "sets"; type: "QList<QBarSet*>" }
        }
        Method { name: "selectAll" }
        Method { name: "deselectAll" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QAbstractDataProxy"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/AbstractDataProxy 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "DataType"
            isScoped: true
            values: ["None", "Bar", "Scatter", "Surface"]
        }
        Property {
            name: "type"
            type: "QAbstractDataProxy::DataType"
            read: "type"
            index: 0
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QAbstractItemModel"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/AbstractItemModel 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "LayoutChangeHint"
            values: [
                "NoLayoutChangeHint",
                "VerticalSortHint",
                "HorizontalSortHint"
            ]
        }
        Enum {
            name: "CheckIndexOption"
            values: [
                "NoOption",
                "IndexIsValid",
                "DoNotUseParent",
                "ParentIsInvalid"
            ]
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "int"; isList: true }
        }
        Signal {
            name: "dataChanged"
            isCloned: true
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QPersistentModelIndex"; isList: true }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            isCloned: true
            Parameter { name: "parents"; type: "QPersistentModelIndex"; isList: true }
        }
        Signal { name: "layoutChanged"; isCloned: true }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QPersistentModelIndex"; isList: true }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            isCloned: true
            Parameter { name: "parents"; type: "QPersistentModelIndex"; isList: true }
        }
        Signal { name: "layoutAboutToBeChanged"; isCloned: true }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method { name: "resetInternalData" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            isCloned: true
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            isCloned: true
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int"; isCloned: true }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool"; isCloned: true }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            isCloned: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            isCloned: true
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "insertRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertRows"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "insertColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertColumns"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "removeRows"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeRows"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "removeColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeColumns"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "column"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "moveRows"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceRow"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "moveColumns"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceColumn"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "insertRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertRow"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "insertColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "insertColumn"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "removeRow"
            revision: 1540
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeRow"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "removeColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeColumn"
            revision: 1540
            type: "bool"
            isCloned: true
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "moveRow"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceRow"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "moveColumn"
            revision: 1540
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceColumn"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "sort"
            revision: 1540
            Parameter { name: "column"; type: "int" }
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method {
            name: "sort"
            revision: 1540
            isCloned: true
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            isCloned: true
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            isCloned: true
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "qabstractseries.h"
        name: "QAbstractSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        Enum {
            name: "SeriesType"
            values: ["SeriesTypeLine", "SeriesTypeBar", "SeriesTypeScatter"]
        }
        Property {
            name: "theme"
            type: "QSeriesTheme"
            isPointer: true
            read: "theme"
            write: "setTheme"
            notify: "themeChanged"
            index: 0
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 1
        }
        Property {
            name: "visible"
            type: "bool"
            read: "isVisible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 2
        }
        Property {
            name: "selectable"
            type: "bool"
            read: "selectable"
            write: "setSelectable"
            notify: "selectableChanged"
            index: 3
        }
        Property {
            name: "hoverable"
            type: "bool"
            read: "hoverable"
            write: "setHoverable"
            notify: "hoverableChanged"
            index: 4
        }
        Property {
            name: "opacity"
            type: "double"
            read: "opacity"
            write: "setOpacity"
            notify: "opacityChanged"
            index: 5
        }
        Property {
            name: "valuesMultiplier"
            type: "double"
            read: "valuesMultiplier"
            write: "setValuesMultiplier"
            notify: "valuesMultiplierChanged"
            index: 6
        }
        Property {
            name: "type"
            type: "SeriesType"
            read: "type"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "seriesChildren"
            type: "QObject"
            isList: true
            read: "seriesChildren"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Signal { name: "update" }
        Signal { name: "themeChanged" }
        Signal { name: "nameChanged" }
        Signal { name: "visibleChanged" }
        Signal { name: "selectableChanged" }
        Signal { name: "hoverableChanged" }
        Signal { name: "opacityChanged" }
        Signal { name: "valuesMultiplierChanged" }
        Signal {
            name: "hoverEnter"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "hoverExit"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Signal {
            name: "hover"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "value"; type: "QPointF" }
        }
        Method {
            name: "appendSeriesChildren"
            Parameter { name: "list"; type: "QQmlListProperty<QObject>"; isPointer: true }
            Parameter { name: "element"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/foreigntypesbars_p.h"
        name: "QBar3DSeries"
        accessSemantics: "reference"
        prototype: "QAbstract3DSeries"
        exports: ["QtGraphs/QBar3DSeries 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Property {
            name: "dataProxy"
            type: "QBarDataProxy"
            isPointer: true
            read: "dataProxy"
            write: "setDataProxy"
            notify: "dataProxyChanged"
            index: 0
        }
        Property {
            name: "selectedBar"
            type: "QPoint"
            read: "selectedBar"
            write: "setSelectedBar"
            notify: "selectedBarChanged"
            index: 1
        }
        Property {
            name: "meshAngle"
            type: "float"
            read: "meshAngle"
            write: "setMeshAngle"
            notify: "meshAngleChanged"
            index: 2
        }
        Property {
            name: "rowColors"
            type: "QColor"
            isList: true
            read: "rowColors"
            write: "setRowColors"
            notify: "rowColorsChanged"
            index: 3
        }
        Signal {
            name: "dataProxyChanged"
            Parameter { name: "proxy"; type: "QBarDataProxy"; isPointer: true }
        }
        Signal {
            name: "selectedBarChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "meshAngleChanged"
            Parameter { name: "angle"; type: "float" }
        }
        Signal {
            name: "rowColorsChanged"
            Parameter { name: "rowcolors"; type: "QColor"; isList: true }
        }
    }
    Component {
        file: "qbarcategoryaxis.h"
        name: "QBarCategoryAxis"
        accessSemantics: "reference"
        prototype: "QAbstractAxis"
        exports: ["QtGraphs/BarCategoryAxis 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "categories"
            type: "QStringList"
            read: "categories"
            write: "setCategories"
            notify: "categoriesChanged"
            index: 0
        }
        Property {
            name: "min"
            type: "QString"
            read: "min"
            write: "setMin"
            notify: "minChanged"
            index: 1
        }
        Property {
            name: "max"
            type: "QString"
            read: "max"
            write: "setMax"
            notify: "maxChanged"
            index: 2
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 3
            isReadonly: true
        }
        Signal { name: "categoriesChanged" }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "QString" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "QString" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "QString" }
            Parameter { name: "max"; type: "QString" }
        }
        Signal { name: "countChanged" }
        Method { name: "clear" }
    }
    Component {
        file: "private/foreigntypesbars_p.h"
        name: "QBarDataProxy"
        accessSemantics: "reference"
        prototype: "QAbstractDataProxy"
        exports: ["QtGraphs/BarDataProxy 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Property {
            name: "rowCount"
            type: "int"
            read: "rowCount"
            notify: "rowCountChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "colCount"
            type: "int"
            read: "colCount"
            notify: "colCountChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "rowLabels"
            type: "QStringList"
            read: "rowLabels"
            write: "setRowLabels"
            notify: "rowLabelsChanged"
            index: 2
        }
        Property {
            name: "columnLabels"
            type: "QStringList"
            read: "columnLabels"
            write: "setColumnLabels"
            notify: "columnLabelsChanged"
            index: 3
        }
        Property {
            name: "series"
            type: "QBar3DSeries"
            isPointer: true
            read: "series"
            notify: "seriesChanged"
            index: 4
            isReadonly: true
        }
        Signal { name: "arrayReset" }
        Signal {
            name: "rowsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "rowIndex"; type: "int" }
            Parameter { name: "columnIndex"; type: "int" }
        }
        Signal {
            name: "rowCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "colCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal { name: "rowLabelsChanged" }
        Signal { name: "columnLabelsChanged" }
        Signal {
            name: "seriesChanged"
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
    }
    Component {
        file: "qbarseries.h"
        name: "QBarSeries"
        accessSemantics: "reference"
        prototype: "QAbstractBarSeries"
        exports: ["QtGraphs/BarSeries 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "axisX"
            type: "QAbstractAxis"
            isPointer: true
            read: "axisX"
            write: "setAxisX"
            notify: "axisXChanged"
            index: 0
        }
        Property {
            name: "axisY"
            type: "QAbstractAxis"
            isPointer: true
            read: "axisY"
            write: "setAxisY"
            notify: "axisYChanged"
            index: 1
        }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QAbstractAxis"; isPointer: true }
        }
    }
    Component {
        file: "qbarset.h"
        name: "QBarSet"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/BarSet 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "label"
            type: "QString"
            read: "label"
            write: "setLabel"
            notify: "labelChanged"
            index: 0
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 1
        }
        Property {
            name: "borderColor"
            type: "QColor"
            read: "borderColor"
            write: "setBorderColor"
            notify: "borderColorChanged"
            index: 2
        }
        Property {
            name: "labelColor"
            type: "QColor"
            read: "labelColor"
            write: "setLabelColor"
            notify: "labelColorChanged"
            index: 3
        }
        Property {
            name: "values"
            type: "QVariantList"
            read: "values"
            write: "setValues"
            notify: "valuesChanged"
            index: 4
        }
        Property {
            name: "borderWidth"
            type: "double"
            read: "borderWidth"
            write: "setBorderWidth"
            notify: "borderWidthChanged"
            index: 5
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "selectedBars"
            type: "int"
            isList: true
            read: "selectedBars"
            notify: "selectedBarsChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "update" }
        Signal { name: "labelChanged" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "labelColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal { name: "valuesChanged" }
        Signal {
            name: "selectedColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal { name: "countChanged" }
        Signal {
            name: "borderWidthChanged"
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "valuesAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "valuesRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "selectedBarsChanged"
            Parameter { name: "indexes"; type: "int"; isList: true }
        }
        Method {
            name: "selectBar"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "deselectBar"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setBarSelected"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "selected"; type: "bool" }
        }
        Method { name: "selectAllBars" }
        Method { name: "deselectAllBars" }
        Method {
            name: "selectBars"
            Parameter { name: "indexes"; type: "int"; isList: true }
        }
        Method {
            name: "deselectBars"
            Parameter { name: "indexes"; type: "int"; isList: true }
        }
        Method {
            name: "toggleSelection"
            Parameter { name: "indexes"; type: "int"; isList: true }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QCategory3DAxis"
        accessSemantics: "reference"
        prototype: "QAbstract3DAxis"
        exports: ["QtGraphs/CategoryAxis3D 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "labels"
            type: "QStringList"
            read: "labels"
            write: "setLabels"
            notify: "labelsChanged"
            index: 0
        }
        Signal { name: "rowLabelsChanged" }
        Signal { name: "columnLabelsChanged" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QCustom3DItem"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/Custom3DItem 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "meshFile"
            type: "QString"
            read: "meshFile"
            write: "setMeshFile"
            notify: "meshFileChanged"
            index: 0
        }
        Property {
            name: "textureFile"
            type: "QString"
            read: "textureFile"
            write: "setTextureFile"
            notify: "textureFileChanged"
            index: 1
        }
        Property {
            name: "position"
            type: "QVector3D"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 2
        }
        Property {
            name: "positionAbsolute"
            type: "bool"
            read: "isPositionAbsolute"
            write: "setPositionAbsolute"
            notify: "positionAbsoluteChanged"
            index: 3
        }
        Property {
            name: "scaling"
            type: "QVector3D"
            read: "scaling"
            write: "setScaling"
            notify: "scalingChanged"
            index: 4
        }
        Property {
            name: "rotation"
            type: "QQuaternion"
            read: "rotation"
            write: "setRotation"
            notify: "rotationChanged"
            index: 5
        }
        Property {
            name: "visible"
            type: "bool"
            read: "isVisible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 6
        }
        Property {
            name: "shadowCasting"
            type: "bool"
            read: "isShadowCasting"
            write: "setShadowCasting"
            notify: "shadowCastingChanged"
            index: 7
        }
        Property {
            name: "scalingAbsolute"
            type: "bool"
            read: "isScalingAbsolute"
            write: "setScalingAbsolute"
            notify: "scalingAbsoluteChanged"
            index: 8
        }
        Signal {
            name: "meshFileChanged"
            Parameter { name: "meshFile"; type: "QString" }
        }
        Signal {
            name: "textureFileChanged"
            Parameter { name: "textureFile"; type: "QString" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Signal {
            name: "positionAbsoluteChanged"
            Parameter { name: "positionAbsolute"; type: "bool" }
        }
        Signal {
            name: "scalingChanged"
            Parameter { name: "scaling"; type: "QVector3D" }
        }
        Signal {
            name: "rotationChanged"
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "shadowCastingChanged"
            Parameter { name: "shadowCasting"; type: "bool" }
        }
        Signal {
            name: "scalingAbsoluteChanged"
            Parameter { name: "scalingAbsolute"; type: "bool" }
        }
        Signal { name: "needUpdate" }
        Method {
            name: "setRotationAxisAndAngle"
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "angle"; type: "float" }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QCustom3DLabel"
        accessSemantics: "reference"
        prototype: "QCustom3DItem"
        exports: ["QtGraphs/Custom3DLabel 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "text"
            type: "QString"
            read: "text"
            write: "setText"
            notify: "textChanged"
            index: 0
        }
        Property {
            name: "font"
            type: "QFont"
            read: "font"
            write: "setFont"
            notify: "fontChanged"
            index: 1
        }
        Property {
            name: "textColor"
            type: "QColor"
            read: "textColor"
            write: "setTextColor"
            notify: "textColorChanged"
            index: 2
        }
        Property {
            name: "backgroundColor"
            type: "QColor"
            read: "backgroundColor"
            write: "setBackgroundColor"
            notify: "backgroundColorChanged"
            index: 3
        }
        Property {
            name: "borderEnabled"
            type: "bool"
            read: "isBorderEnabled"
            write: "setBorderEnabled"
            notify: "borderEnabledChanged"
            index: 4
        }
        Property {
            name: "backgroundEnabled"
            type: "bool"
            read: "isBackgroundEnabled"
            write: "setBackgroundEnabled"
            notify: "backgroundEnabledChanged"
            index: 5
        }
        Property {
            name: "facingCamera"
            type: "bool"
            read: "isFacingCamera"
            write: "setFacingCamera"
            notify: "facingCameraChanged"
            index: 6
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "textColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "backgroundColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "borderEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "backgroundEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "facingCameraChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QCustom3DVolume"
        accessSemantics: "reference"
        prototype: "QCustom3DItem"
        exports: ["QtGraphs/Custom3DVolume 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "textureWidth"
            type: "int"
            read: "textureWidth"
            write: "setTextureWidth"
            notify: "textureWidthChanged"
            index: 0
        }
        Property {
            name: "textureHeight"
            type: "int"
            read: "textureHeight"
            write: "setTextureHeight"
            notify: "textureHeightChanged"
            index: 1
        }
        Property {
            name: "textureDepth"
            type: "int"
            read: "textureDepth"
            write: "setTextureDepth"
            notify: "textureDepthChanged"
            index: 2
        }
        Property {
            name: "sliceIndexX"
            type: "int"
            read: "sliceIndexX"
            write: "setSliceIndexX"
            notify: "sliceIndexXChanged"
            index: 3
        }
        Property {
            name: "sliceIndexY"
            type: "int"
            read: "sliceIndexY"
            write: "setSliceIndexY"
            notify: "sliceIndexYChanged"
            index: 4
        }
        Property {
            name: "sliceIndexZ"
            type: "int"
            read: "sliceIndexZ"
            write: "setSliceIndexZ"
            notify: "sliceIndexZChanged"
            index: 5
        }
        Property {
            name: "colorTable"
            type: "QRgb"
            isList: true
            read: "colorTable"
            write: "setColorTable"
            notify: "colorTableChanged"
            index: 6
        }
        Property {
            name: "textureData"
            type: "QList<uchar>"
            isPointer: true
            read: "textureData"
            write: "setTextureData"
            notify: "textureDataChanged"
            index: 7
        }
        Property {
            name: "alphaMultiplier"
            type: "float"
            read: "alphaMultiplier"
            write: "setAlphaMultiplier"
            notify: "alphaMultiplierChanged"
            index: 8
        }
        Property {
            name: "preserveOpacity"
            type: "bool"
            read: "preserveOpacity"
            write: "setPreserveOpacity"
            notify: "preserveOpacityChanged"
            index: 9
        }
        Property {
            name: "useHighDefShader"
            type: "bool"
            read: "useHighDefShader"
            write: "setUseHighDefShader"
            notify: "useHighDefShaderChanged"
            index: 10
        }
        Property {
            name: "drawSlices"
            type: "bool"
            read: "drawSlices"
            write: "setDrawSlices"
            notify: "drawSlicesChanged"
            index: 11
        }
        Property {
            name: "drawSliceFrames"
            type: "bool"
            read: "drawSliceFrames"
            write: "setDrawSliceFrames"
            notify: "drawSliceFramesChanged"
            index: 12
        }
        Property {
            name: "sliceFrameColor"
            type: "QColor"
            read: "sliceFrameColor"
            write: "setSliceFrameColor"
            notify: "sliceFrameColorChanged"
            index: 13
        }
        Property {
            name: "sliceFrameWidths"
            type: "QVector3D"
            read: "sliceFrameWidths"
            write: "setSliceFrameWidths"
            notify: "sliceFrameWidthsChanged"
            index: 14
        }
        Property {
            name: "sliceFrameGaps"
            type: "QVector3D"
            read: "sliceFrameGaps"
            write: "setSliceFrameGaps"
            notify: "sliceFrameGapsChanged"
            index: 15
        }
        Property {
            name: "sliceFrameThicknesses"
            type: "QVector3D"
            read: "sliceFrameThicknesses"
            write: "setSliceFrameThicknesses"
            notify: "sliceFrameThicknessesChanged"
            index: 16
        }
        Signal {
            name: "textureWidthChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "textureHeightChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "textureDepthChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "sliceIndexXChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "sliceIndexYChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "sliceIndexZChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal { name: "colorTableChanged" }
        Signal {
            name: "textureDataChanged"
            Parameter { name: "data"; type: "QList<uchar>"; isPointer: true }
        }
        Signal {
            name: "textureFormatChanged"
            Parameter { name: "format"; type: "QImage::Format" }
        }
        Signal {
            name: "alphaMultiplierChanged"
            Parameter { name: "mult"; type: "float" }
        }
        Signal {
            name: "preserveOpacityChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "useHighDefShaderChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "drawSlicesChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "drawSliceFramesChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "sliceFrameColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "sliceFrameWidthsChanged"
            Parameter { name: "values"; type: "QVector3D" }
        }
        Signal {
            name: "sliceFrameGapsChanged"
            Parameter { name: "values"; type: "QVector3D" }
        }
        Signal {
            name: "sliceFrameThicknessesChanged"
            Parameter { name: "values"; type: "QVector3D" }
        }
    }
    Component {
        file: "qgraphtheme.h"
        name: "QGraphTheme"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtGraphs/GraphTheme 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "ColorTheme"
            values: ["ColorThemeLight", "ColorThemeDark"]
        }
        Property {
            name: "colorTheme"
            type: "ColorTheme"
            read: "colorTheme"
            write: "setColorTheme"
            notify: "colorThemeChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "gridMajorBarsWidth"
            type: "double"
            read: "gridMajorBarsWidth"
            write: "setGridMajorBarsWidth"
            notify: "gridMajorBarsWidthChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "gridMinorBarsWidth"
            type: "double"
            read: "gridMinorBarsWidth"
            write: "setGridMinorBarsWidth"
            notify: "gridMinorBarsWidthChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "gridSmoothing"
            type: "double"
            read: "gridSmoothing"
            write: "setGridSmoothing"
            notify: "gridSmoothingChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "gridMajorBarsColor"
            type: "QColor"
            read: "gridMajorBarsColor"
            write: "setGridMajorBarsColor"
            notify: "gridMajorBarsColorChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "gridMinorBarsColor"
            type: "QColor"
            read: "gridMinorBarsColor"
            write: "setGridMinorBarsColor"
            notify: "gridMinorBarsColorChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "axisYMajorColor"
            type: "QColor"
            read: "axisYMajorColor"
            write: "setAxisYMajorColor"
            notify: "axisYMajorColorChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "axisYMinorColor"
            type: "QColor"
            read: "axisYMinorColor"
            write: "setAxisYMinorColor"
            notify: "axisYMinorColorChanged"
            index: 7
            isFinal: true
        }
        Property {
            name: "axisYMajorBarWidth"
            type: "double"
            read: "axisYMajorBarWidth"
            write: "setAxisYMajorBarWidth"
            notify: "axisYMajorBarWidthChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "axisYMinorBarWidth"
            type: "double"
            read: "axisYMinorBarWidth"
            write: "setAxisYMinorBarWidth"
            notify: "axisYMinorBarWidthChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "axisYSmoothing"
            type: "double"
            read: "axisYSmoothing"
            write: "setAxisYSmoothing"
            notify: "axisYSmoothingChanged"
            index: 10
            isFinal: true
        }
        Property {
            name: "axisYLabelsColor"
            type: "QColor"
            read: "axisYLabelsColor"
            write: "setAxisYLabelsColor"
            notify: "axisYLabelsColorChanged"
            index: 11
            isFinal: true
        }
        Property {
            name: "axisYLabelsFont"
            type: "QFont"
            read: "axisYLabelsFont"
            write: "setAxisYLabelsFont"
            notify: "axisYLabelsFontChanged"
            index: 12
            isFinal: true
        }
        Property {
            name: "axisXMajorColor"
            type: "QColor"
            read: "axisXMajorColor"
            write: "setAxisXMajorColor"
            notify: "axisXMajorColorChanged"
            index: 13
            isFinal: true
        }
        Property {
            name: "axisXMinorColor"
            type: "QColor"
            read: "axisXMinorColor"
            write: "setAxisXMinorColor"
            notify: "axisXMinorColorChanged"
            index: 14
            isFinal: true
        }
        Property {
            name: "axisXMajorBarWidth"
            type: "double"
            read: "axisXMajorBarWidth"
            write: "setAxisXMajorBarWidth"
            notify: "axisXMajorBarWidthChanged"
            index: 15
            isFinal: true
        }
        Property {
            name: "axisXMinorBarWidth"
            type: "double"
            read: "axisXMinorBarWidth"
            write: "setAxisXMinorBarWidth"
            notify: "axisXMinorBarWidthChanged"
            index: 16
            isFinal: true
        }
        Property {
            name: "axisXSmoothing"
            type: "double"
            read: "axisXSmoothing"
            write: "setAxisXSmoothing"
            notify: "axisXSmoothingChanged"
            index: 17
            isFinal: true
        }
        Property {
            name: "axisXLabelsColor"
            type: "QColor"
            read: "axisXLabelsColor"
            write: "setAxisXLabelsColor"
            notify: "axisXLabelsColorChanged"
            index: 18
            isFinal: true
        }
        Property {
            name: "axisXLabelsFont"
            type: "QFont"
            read: "axisXLabelsFont"
            write: "setAxisXLabelsFont"
            notify: "axisXLabelsFontChanged"
            index: 19
            isFinal: true
        }
        Property {
            name: "shadowEnabled"
            type: "bool"
            read: "shadowEnabled"
            write: "setShadowEnabled"
            notify: "shadowEnabledChanged"
            index: 20
            isFinal: true
        }
        Property {
            name: "shadowColor"
            type: "QColor"
            read: "shadowColor"
            write: "setShadowColor"
            notify: "shadowColorChanged"
            index: 21
            isFinal: true
        }
        Property {
            name: "shadowBarWidth"
            type: "double"
            read: "shadowBarWidth"
            write: "setShadowBarWidth"
            notify: "shadowBarWidthChanged"
            index: 22
            isFinal: true
        }
        Property {
            name: "shadowXOffset"
            type: "double"
            read: "shadowXOffset"
            write: "setShadowXOffset"
            notify: "shadowXOffsetChanged"
            index: 23
            isFinal: true
        }
        Property {
            name: "shadowYOffset"
            type: "double"
            read: "shadowYOffset"
            write: "setShadowYOffset"
            notify: "shadowYOffsetChanged"
            index: 24
            isFinal: true
        }
        Property {
            name: "shadowSmoothing"
            type: "double"
            read: "shadowSmoothing"
            write: "setShadowSmoothing"
            notify: "shadowSmoothingChanged"
            index: 25
            isFinal: true
        }
        Signal { name: "update" }
        Signal { name: "colorThemeChanged" }
        Signal { name: "gridMajorBarsWidthChanged" }
        Signal { name: "gridMinorBarsWidthChanged" }
        Signal { name: "gridSmoothingChanged" }
        Signal { name: "gridMajorBarsColorChanged" }
        Signal { name: "gridMinorBarsColorChanged" }
        Signal { name: "axisYMajorColorChanged" }
        Signal { name: "axisYMinorColorChanged" }
        Signal { name: "axisYMajorBarWidthChanged" }
        Signal { name: "axisYMinorBarWidthChanged" }
        Signal { name: "axisYSmoothingChanged" }
        Signal { name: "axisYLabelsColorChanged" }
        Signal { name: "axisYLabelsFontChanged" }
        Signal { name: "axisXMajorColorChanged" }
        Signal { name: "axisXMinorColorChanged" }
        Signal { name: "axisXMajorBarWidthChanged" }
        Signal { name: "axisXMinorBarWidthChanged" }
        Signal { name: "axisXSmoothingChanged" }
        Signal { name: "axisXLabelsColorChanged" }
        Signal { name: "axisXLabelsFontChanged" }
        Signal { name: "shadowEnabledChanged" }
        Signal { name: "shadowColorChanged" }
        Signal { name: "shadowBarWidthChanged" }
        Signal { name: "shadowXOffsetChanged" }
        Signal { name: "shadowYOffsetChanged" }
        Signal { name: "shadowSmoothingChanged" }
    }
    Component {
        file: "private/qgraphsview_p.h"
        name: "QGraphsView"
        accessSemantics: "reference"
        defaultProperty: "seriesList"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtGraphs/GraphsView 6.0",
            "QtGraphs/GraphsView 6.3",
            "QtGraphs/GraphsView 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1539, 1543]
        Property {
            name: "theme"
            type: "QGraphTheme"
            isPointer: true
            read: "theme"
            write: "setTheme"
            notify: "themeChanged"
            index: 0
        }
        Property {
            name: "seriesList"
            type: "QObject"
            isList: true
            read: "seriesList"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "backgroundColor"
            type: "QColor"
            read: "backgroundColor"
            write: "setBackgroundColor"
            notify: "backgroundColorChanged"
            index: 2
        }
        Property {
            name: "marginTop"
            type: "double"
            read: "marginTop"
            write: "setMarginTop"
            notify: "marginTopChanged"
            index: 3
        }
        Property {
            name: "marginBottom"
            type: "double"
            read: "marginBottom"
            write: "setMarginBottom"
            notify: "marginBottomChanged"
            index: 4
        }
        Property {
            name: "marginLeft"
            type: "double"
            read: "marginLeft"
            write: "setMarginLeft"
            notify: "marginLeftChanged"
            index: 5
        }
        Property {
            name: "marginRight"
            type: "double"
            read: "marginRight"
            write: "setMarginRight"
            notify: "marginRightChanged"
            index: 6
        }
        Signal { name: "backgroundColorChanged" }
        Signal { name: "themeChanged" }
        Signal { name: "marginTopChanged" }
        Signal { name: "marginBottomChanged" }
        Signal { name: "marginLeftChanged" }
        Signal { name: "marginRightChanged" }
        Signal {
            name: "hoverEnter"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "hoverExit"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Signal {
            name: "hover"
            Parameter { name: "seriesName"; type: "QString" }
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "value"; type: "QPointF" }
        }
        Method {
            name: "addSeries"
            Parameter { name: "series"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeSeries"
            Parameter { name: "series"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "insertSeries"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "series"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "hasSeries"
            type: "bool"
            Parameter { name: "series"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/foreigntypessurface_p.h"
        name: "QHeightMapSurfaceDataProxy"
        accessSemantics: "reference"
        prototype: "QSurfaceDataProxy"
        exports: ["QtGraphs/HeightMapSurfaceDataProxy 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "heightMap"
            type: "QImage"
            read: "heightMap"
            write: "setHeightMap"
            notify: "heightMapChanged"
            index: 0
        }
        Property {
            name: "heightMapFile"
            type: "QString"
            read: "heightMapFile"
            write: "setHeightMapFile"
            notify: "heightMapFileChanged"
            index: 1
        }
        Property {
            name: "minXValue"
            type: "float"
            read: "minXValue"
            write: "setMinXValue"
            notify: "minXValueChanged"
            index: 2
        }
        Property {
            name: "maxXValue"
            type: "float"
            read: "maxXValue"
            write: "setMaxXValue"
            notify: "maxXValueChanged"
            index: 3
        }
        Property {
            name: "minZValue"
            type: "float"
            read: "minZValue"
            write: "setMinZValue"
            notify: "minZValueChanged"
            index: 4
        }
        Property {
            name: "maxZValue"
            type: "float"
            read: "maxZValue"
            write: "setMaxZValue"
            notify: "maxZValueChanged"
            index: 5
        }
        Property {
            name: "minYValue"
            type: "float"
            read: "minYValue"
            write: "setMinYValue"
            notify: "minYValueChanged"
            index: 6
        }
        Property {
            name: "maxYValue"
            type: "float"
            read: "maxYValue"
            write: "setMaxYValue"
            notify: "maxYValueChanged"
            index: 7
        }
        Property {
            name: "autoScaleY"
            type: "bool"
            read: "autoScaleY"
            write: "setAutoScaleY"
            notify: "autoScaleYChanged"
            index: 8
        }
        Signal {
            name: "heightMapChanged"
            Parameter { name: "image"; type: "QImage" }
        }
        Signal {
            name: "heightMapFileChanged"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal {
            name: "minXValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "maxXValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "minZValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "maxZValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "minYValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "maxYValueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "autoScaleYChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        file: "private/foreigntypesbars_p.h"
        name: "QItemModelBarDataProxy"
        accessSemantics: "reference"
        prototype: "QBarDataProxy"
        exports: ["QtGraphs/ItemModelBarDataProxy 6.6"]
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "MultiMatchBehavior"
            isScoped: true
            values: ["First", "Last", "Average", "Cumulative"]
        }
        Property {
            name: "itemModel"
            type: "QAbstractItemModel"
            isPointer: true
            read: "itemModel"
            write: "setItemModel"
            notify: "itemModelChanged"
            index: 0
        }
        Property {
            name: "rowRole"
            type: "QString"
            read: "rowRole"
            write: "setRowRole"
            notify: "rowRoleChanged"
            index: 1
        }
        Property {
            name: "columnRole"
            type: "QString"
            read: "columnRole"
            write: "setColumnRole"
            notify: "columnRoleChanged"
            index: 2
        }
        Property {
            name: "valueRole"
            type: "QString"
            read: "valueRole"
            write: "setValueRole"
            notify: "valueRoleChanged"
            index: 3
        }
        Property {
            name: "rotationRole"
            type: "QString"
            read: "rotationRole"
            write: "setRotationRole"
            notify: "rotationRoleChanged"
            index: 4
        }
        Property {
            name: "rowCategories"
            type: "QStringList"
            read: "rowCategories"
            write: "setRowCategories"
            notify: "rowCategoriesChanged"
            index: 5
        }
        Property {
            name: "columnCategories"
            type: "QStringList"
            read: "columnCategories"
            write: "setColumnCategories"
            notify: "columnCategoriesChanged"
            index: 6
        }
        Property {
            name: "useModelCategories"
            type: "bool"
            read: "useModelCategories"
            write: "setUseModelCategories"
            notify: "useModelCategoriesChanged"
            index: 7
        }
        Property {
            name: "autoRowCategories"
            type: "bool"
            read: "autoRowCategories"
            write: "setAutoRowCategories"
            notify: "autoRowCategoriesChanged"
            index: 8
        }
        Property {
            name: "autoColumnCategories"
            type: "bool"
            read: "autoColumnCategories"
            write: "setAutoColumnCategories"
            notify: "autoColumnCategoriesChanged"
            index: 9
        }
        Property {
            name: "rowRolePattern"
            type: "QRegularExpression"
            read: "rowRolePattern"
            write: "setRowRolePattern"
            notify: "rowRolePatternChanged"
            index: 10
        }
        Property {
            name: "columnRolePattern"
            type: "QRegularExpression"
            read: "columnRolePattern"
            write: "setColumnRolePattern"
            notify: "columnRolePatternChanged"
            index: 11
        }
        Property {
            name: "valueRolePattern"
            type: "QRegularExpression"
            read: "valueRolePattern"
            write: "setValueRolePattern"
            notify: "valueRolePatternChanged"
            index: 12
        }
        Property {
            name: "rotationRolePattern"
            type: "QRegularExpression"
            read: "rotationRolePattern"
            write: "setRotationRolePattern"
            notify: "rotationRolePatternChanged"
            index: 13
        }
        Property {
            name: "rowRoleReplace"
            type: "QString"
            read: "rowRoleReplace"
            write: "setRowRoleReplace"
            notify: "rowRoleReplaceChanged"
            index: 14
        }
        Property {
            name: "columnRoleReplace"
            type: "QString"
            read: "columnRoleReplace"
            write: "setColumnRoleReplace"
            notify: "columnRoleReplaceChanged"
            index: 15
        }
        Property {
            name: "valueRoleReplace"
            type: "QString"
            read: "valueRoleReplace"
            write: "setValueRoleReplace"
            notify: "valueRoleReplaceChanged"
            index: 16
        }
        Property {
            name: "rotationRoleReplace"
            type: "QString"
            read: "rotationRoleReplace"
            write: "setRotationRoleReplace"
            notify: "rotationRoleReplaceChanged"
            index: 17
        }
        Property {
            name: "multiMatchBehavior"
            type: "QItemModelBarDataProxy::MultiMatchBehavior"
            read: "multiMatchBehavior"
            write: "setMultiMatchBehavior"
            notify: "multiMatchBehaviorChanged"
            index: 18
        }
        Signal {
            name: "itemModelChanged"
            Parameter { name: "itemModel"; type: "QAbstractItemModel"; isPointer: true; isConstant: true }
        }
        Signal {
            name: "rowRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "columnRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "valueRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "rotationRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal { name: "rowCategoriesChanged" }
        Signal { name: "columnCategoriesChanged" }
        Signal {
            name: "useModelCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "autoRowCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "autoColumnCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "rowRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "columnRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "valueRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "rotationRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "rowRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "columnRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "valueRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "rotationRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "multiMatchBehaviorChanged"
            Parameter { name: "behavior"; type: "QItemModelBarDataProxy::MultiMatchBehavior" }
        }
        Method {
            name: "rowCategoryIndex"
            type: "int"
            Parameter { name: "category"; type: "QString" }
        }
        Method {
            name: "columnCategoryIndex"
            type: "int"
            Parameter { name: "category"; type: "QString" }
        }
    }
    Component {
        file: "private/foreigntypesscatter_p.h"
        name: "QItemModelScatterDataProxy"
        accessSemantics: "reference"
        prototype: "QScatterDataProxy"
        exports: ["QtGraphs/ItemModelScatterDataProxy 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "itemModel"
            type: "QAbstractItemModel"
            isPointer: true
            read: "itemModel"
            write: "setItemModel"
            notify: "itemModelChanged"
            index: 0
        }
        Property {
            name: "xPosRole"
            type: "QString"
            read: "xPosRole"
            write: "setXPosRole"
            notify: "xPosRoleChanged"
            index: 1
        }
        Property {
            name: "yPosRole"
            type: "QString"
            read: "yPosRole"
            write: "setYPosRole"
            notify: "yPosRoleChanged"
            index: 2
        }
        Property {
            name: "zPosRole"
            type: "QString"
            read: "zPosRole"
            write: "setZPosRole"
            notify: "zPosRoleChanged"
            index: 3
        }
        Property {
            name: "rotationRole"
            type: "QString"
            read: "rotationRole"
            write: "setRotationRole"
            notify: "rotationRoleChanged"
            index: 4
        }
        Property {
            name: "xPosRolePattern"
            type: "QRegularExpression"
            read: "xPosRolePattern"
            write: "setXPosRolePattern"
            notify: "xPosRolePatternChanged"
            index: 5
        }
        Property {
            name: "yPosRolePattern"
            type: "QRegularExpression"
            read: "yPosRolePattern"
            write: "setYPosRolePattern"
            notify: "yPosRolePatternChanged"
            index: 6
        }
        Property {
            name: "zPosRolePattern"
            type: "QRegularExpression"
            read: "zPosRolePattern"
            write: "setZPosRolePattern"
            notify: "zPosRolePatternChanged"
            index: 7
        }
        Property {
            name: "rotationRolePattern"
            type: "QRegularExpression"
            read: "rotationRolePattern"
            write: "setRotationRolePattern"
            notify: "rotationRolePatternChanged"
            index: 8
        }
        Property {
            name: "xPosRoleReplace"
            type: "QString"
            read: "xPosRoleReplace"
            write: "setXPosRoleReplace"
            notify: "xPosRoleReplaceChanged"
            index: 9
        }
        Property {
            name: "yPosRoleReplace"
            type: "QString"
            read: "yPosRoleReplace"
            write: "setYPosRoleReplace"
            notify: "yPosRoleReplaceChanged"
            index: 10
        }
        Property {
            name: "zPosRoleReplace"
            type: "QString"
            read: "zPosRoleReplace"
            write: "setZPosRoleReplace"
            notify: "zPosRoleReplaceChanged"
            index: 11
        }
        Property {
            name: "rotationRoleReplace"
            type: "QString"
            read: "rotationRoleReplace"
            write: "setRotationRoleReplace"
            notify: "rotationRoleReplaceChanged"
            index: 12
        }
        Signal {
            name: "itemModelChanged"
            Parameter { name: "itemModel"; type: "QAbstractItemModel"; isPointer: true; isConstant: true }
        }
        Signal {
            name: "xPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "yPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "zPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "rotationRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "xPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "yPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "zPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "rotationRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "rotationRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "xPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "yPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "zPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
    }
    Component {
        file: "private/foreigntypessurface_p.h"
        name: "QItemModelSurfaceDataProxy"
        accessSemantics: "reference"
        prototype: "QSurfaceDataProxy"
        exports: ["QtGraphs/ItemModelSurfaceDataProxy 6.6"]
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "MultiMatchBehavior"
            isScoped: true
            values: ["First", "Last", "Average", "CumulativeY"]
        }
        Property {
            name: "itemModel"
            type: "QAbstractItemModel"
            isPointer: true
            read: "itemModel"
            write: "setItemModel"
            notify: "itemModelChanged"
            index: 0
        }
        Property {
            name: "rowRole"
            type: "QString"
            read: "rowRole"
            write: "setRowRole"
            notify: "rowRoleChanged"
            index: 1
        }
        Property {
            name: "columnRole"
            type: "QString"
            read: "columnRole"
            write: "setColumnRole"
            notify: "columnRoleChanged"
            index: 2
        }
        Property {
            name: "xPosRole"
            type: "QString"
            read: "xPosRole"
            write: "setXPosRole"
            notify: "xPosRoleChanged"
            index: 3
        }
        Property {
            name: "yPosRole"
            type: "QString"
            read: "yPosRole"
            write: "setYPosRole"
            notify: "yPosRoleChanged"
            index: 4
        }
        Property {
            name: "zPosRole"
            type: "QString"
            read: "zPosRole"
            write: "setZPosRole"
            notify: "zPosRoleChanged"
            index: 5
        }
        Property {
            name: "rowCategories"
            type: "QStringList"
            read: "rowCategories"
            write: "setRowCategories"
            notify: "rowCategoriesChanged"
            index: 6
        }
        Property {
            name: "columnCategories"
            type: "QStringList"
            read: "columnCategories"
            write: "setColumnCategories"
            notify: "columnCategoriesChanged"
            index: 7
        }
        Property {
            name: "useModelCategories"
            type: "bool"
            read: "useModelCategories"
            write: "setUseModelCategories"
            notify: "useModelCategoriesChanged"
            index: 8
        }
        Property {
            name: "autoRowCategories"
            type: "bool"
            read: "autoRowCategories"
            write: "setAutoRowCategories"
            notify: "autoRowCategoriesChanged"
            index: 9
        }
        Property {
            name: "autoColumnCategories"
            type: "bool"
            read: "autoColumnCategories"
            write: "setAutoColumnCategories"
            notify: "autoColumnCategoriesChanged"
            index: 10
        }
        Property {
            name: "rowRolePattern"
            type: "QRegularExpression"
            read: "rowRolePattern"
            write: "setRowRolePattern"
            notify: "rowRolePatternChanged"
            index: 11
        }
        Property {
            name: "columnRolePattern"
            type: "QRegularExpression"
            read: "columnRolePattern"
            write: "setColumnRolePattern"
            notify: "columnRolePatternChanged"
            index: 12
        }
        Property {
            name: "xPosRolePattern"
            type: "QRegularExpression"
            read: "xPosRolePattern"
            write: "setXPosRolePattern"
            notify: "xPosRolePatternChanged"
            index: 13
        }
        Property {
            name: "yPosRolePattern"
            type: "QRegularExpression"
            read: "yPosRolePattern"
            write: "setYPosRolePattern"
            notify: "yPosRolePatternChanged"
            index: 14
        }
        Property {
            name: "zPosRolePattern"
            type: "QRegularExpression"
            read: "zPosRolePattern"
            write: "setZPosRolePattern"
            notify: "zPosRolePatternChanged"
            index: 15
        }
        Property {
            name: "rowRoleReplace"
            type: "QString"
            read: "rowRoleReplace"
            write: "setRowRoleReplace"
            notify: "rowRoleReplaceChanged"
            index: 16
        }
        Property {
            name: "columnRoleReplace"
            type: "QString"
            read: "columnRoleReplace"
            write: "setColumnRoleReplace"
            notify: "columnRoleReplaceChanged"
            index: 17
        }
        Property {
            name: "xPosRoleReplace"
            type: "QString"
            read: "xPosRoleReplace"
            write: "setXPosRoleReplace"
            notify: "xPosRoleReplaceChanged"
            index: 18
        }
        Property {
            name: "yPosRoleReplace"
            type: "QString"
            read: "yPosRoleReplace"
            write: "setYPosRoleReplace"
            notify: "yPosRoleReplaceChanged"
            index: 19
        }
        Property {
            name: "zPosRoleReplace"
            type: "QString"
            read: "zPosRoleReplace"
            write: "setZPosRoleReplace"
            notify: "zPosRoleReplaceChanged"
            index: 20
        }
        Property {
            name: "multiMatchBehavior"
            type: "QItemModelSurfaceDataProxy::MultiMatchBehavior"
            read: "multiMatchBehavior"
            write: "setMultiMatchBehavior"
            notify: "multiMatchBehaviorChanged"
            index: 21
        }
        Signal {
            name: "itemModelChanged"
            Parameter { name: "itemModel"; type: "QAbstractItemModel"; isPointer: true; isConstant: true }
        }
        Signal {
            name: "rowRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "columnRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "xPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "yPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal {
            name: "zPosRoleChanged"
            Parameter { name: "role"; type: "QString" }
        }
        Signal { name: "rowCategoriesChanged" }
        Signal { name: "columnCategoriesChanged" }
        Signal {
            name: "useModelCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "autoRowCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "autoColumnCategoriesChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "rowRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "columnRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "xPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "yPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "zPosRolePatternChanged"
            Parameter { name: "pattern"; type: "QRegularExpression" }
        }
        Signal {
            name: "rowRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "columnRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "xPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "yPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "zPosRoleReplaceChanged"
            Parameter { name: "replace"; type: "QString" }
        }
        Signal {
            name: "multiMatchBehaviorChanged"
            Parameter { name: "behavior"; type: "QItemModelSurfaceDataProxy::MultiMatchBehavior" }
        }
        Method {
            name: "rowCategoryIndex"
            type: "int"
            Parameter { name: "category"; type: "QString" }
        }
        Method {
            name: "columnCategoryIndex"
            type: "int"
            Parameter { name: "category"; type: "QString" }
        }
    }
    Component {
        file: "qlineseries.h"
        name: "QLineSeries"
        accessSemantics: "reference"
        prototype: "QXYSeries"
        exports: ["QtGraphs/LineSeries 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "width"
            type: "double"
            read: "width"
            write: "setWidth"
            notify: "widthChanged"
            index: 0
        }
        Property {
            name: "capStyle"
            type: "Qt::PenCapStyle"
            read: "capStyle"
            write: "setCapStyle"
            notify: "capStyleChanged"
            index: 1
        }
        Signal { name: "widthChanged" }
        Signal { name: "capStyleChanged" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QLogValue3DAxisFormatter"
        accessSemantics: "reference"
        prototype: "QValue3DAxisFormatter"
        exports: ["QtGraphs/LogValueAxis3DFormatter 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "base"
            type: "double"
            read: "base"
            write: "setBase"
            notify: "baseChanged"
            index: 0
        }
        Property {
            name: "autoSubGrid"
            type: "bool"
            read: "autoSubGrid"
            write: "setAutoSubGrid"
            notify: "autoSubGridChanged"
            index: 1
        }
        Property {
            name: "showEdgeLabels"
            type: "bool"
            read: "showEdgeLabels"
            write: "setShowEdgeLabels"
            notify: "showEdgeLabelsChanged"
            index: 2
        }
        Signal {
            name: "baseChanged"
            Parameter { name: "base"; type: "double" }
        }
        Signal {
            name: "autoSubGridChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "showEdgeLabelsChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        file: "private/qquickgraphsbarsseries_p.h"
        name: "QQuickGraphsBar3DSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QBar3DSeries"
        exports: ["QtGraphs/Bar3DSeries 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "seriesChildren"
            type: "QObject"
            isList: true
            read: "seriesChildren"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selectedBar"
            type: "QPointF"
            read: "selectedBar"
            write: "setSelectedBar"
            notify: "selectedBarChanged"
            index: 1
        }
        Property {
            name: "invalidSelectionPosition"
            type: "QPointF"
            read: "invalidSelectionPosition"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baseGradient"
            type: "QJSValue"
            read: "baseGradient"
            write: "setBaseGradient"
            notify: "baseGradientChanged"
            index: 3
        }
        Property {
            name: "singleHighlightGradient"
            type: "QJSValue"
            read: "singleHighlightGradient"
            write: "setSingleHighlightGradient"
            notify: "singleHighlightGradientChanged"
            index: 4
        }
        Property {
            name: "multiHighlightGradient"
            type: "QJSValue"
            read: "multiHighlightGradient"
            write: "setMultiHighlightGradient"
            notify: "multiHighlightGradientChanged"
            index: 5
        }
        Property {
            name: "rowColors"
            type: "QQuickGraphsColor"
            isList: true
            read: "rowColors"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "selectedBarChanged"
            Parameter { name: "position"; type: "QPointF" }
        }
        Signal {
            name: "baseGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "singleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "multiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Method { name: "handleBaseGradientUpdate" }
        Method { name: "handleSingleHighlightGradientUpdate" }
        Method { name: "handleMultiHighlightGradientUpdate" }
        Method { name: "handleRowColorUpdate" }
    }
    Component {
        file: "private/qquickgraphsbars_p.h"
        name: "QQuickGraphsBars"
        accessSemantics: "reference"
        defaultProperty: "seriesList"
        prototype: "QQuickGraphsItem"
        exports: [
            "QtGraphs/Bars3D 6.0",
            "QtGraphs/Bars3D 6.2",
            "QtGraphs/Bars3D 6.3",
            "QtGraphs/Bars3D 6.4",
            "QtGraphs/Bars3D 6.6",
            "QtGraphs/Bars3D 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1538, 1539, 1540, 1542, 1543]
        Property {
            name: "rowAxis"
            type: "QCategory3DAxis"
            isPointer: true
            read: "rowAxis"
            write: "setRowAxis"
            notify: "rowAxisChanged"
            index: 0
        }
        Property {
            name: "valueAxis"
            type: "QValue3DAxis"
            isPointer: true
            read: "valueAxis"
            write: "setValueAxis"
            notify: "valueAxisChanged"
            index: 1
        }
        Property {
            name: "columnAxis"
            type: "QCategory3DAxis"
            isPointer: true
            read: "columnAxis"
            write: "setColumnAxis"
            notify: "columnAxisChanged"
            index: 2
        }
        Property {
            name: "multiSeriesUniform"
            type: "bool"
            read: "isMultiSeriesUniform"
            write: "setMultiSeriesUniform"
            notify: "multiSeriesUniformChanged"
            index: 3
        }
        Property {
            name: "barThickness"
            type: "float"
            read: "barThickness"
            write: "setBarThickness"
            notify: "barThicknessChanged"
            index: 4
        }
        Property {
            name: "barSpacing"
            type: "QSizeF"
            read: "barSpacing"
            write: "setBarSpacing"
            notify: "barSpacingChanged"
            index: 5
        }
        Property {
            name: "barSpacingRelative"
            type: "bool"
            read: "isBarSpacingRelative"
            write: "setBarSpacingRelative"
            notify: "barSpacingRelativeChanged"
            index: 6
        }
        Property {
            name: "barSeriesMargin"
            type: "QSizeF"
            read: "barSeriesMargin"
            write: "setBarSeriesMargin"
            notify: "barSeriesMarginChanged"
            index: 7
        }
        Property {
            name: "seriesList"
            type: "QBar3DSeries"
            isList: true
            read: "seriesList"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selectedSeries"
            type: "QBar3DSeries"
            isPointer: true
            read: "selectedSeries"
            notify: "selectedSeriesChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "primarySeries"
            type: "QBar3DSeries"
            isPointer: true
            read: "primarySeries"
            write: "setPrimarySeries"
            notify: "primarySeriesChanged"
            index: 10
        }
        Property {
            name: "floorLevel"
            type: "float"
            read: "floorLevel"
            write: "setFloorLevel"
            notify: "floorLevelChanged"
            index: 11
        }
        Signal {
            name: "rowAxisChanged"
            Parameter { name: "axis"; type: "QCategory3DAxis"; isPointer: true }
        }
        Signal {
            name: "valueAxisChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "columnAxisChanged"
            Parameter { name: "axis"; type: "QCategory3DAxis"; isPointer: true }
        }
        Signal {
            name: "multiSeriesUniformChanged"
            Parameter { name: "uniform"; type: "bool" }
        }
        Signal {
            name: "barThicknessChanged"
            Parameter { name: "thicknessRatio"; type: "float" }
        }
        Signal {
            name: "barSpacingChanged"
            Parameter { name: "spacing"; type: "QSizeF" }
        }
        Signal {
            name: "barSpacingRelativeChanged"
            Parameter { name: "relative"; type: "bool" }
        }
        Signal {
            name: "barSeriesMarginChanged"
            Parameter { name: "margin"; type: "QSizeF" }
        }
        Signal {
            name: "meshFileNameChanged"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal {
            name: "primarySeriesChanged"
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
        Signal {
            name: "selectedSeriesChanged"
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
        Signal {
            name: "floorLevelChanged"
            Parameter { name: "level"; type: "float" }
        }
        Method {
            name: "handleAxisXChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisYChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisZChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleSeriesMeshChanged"
            Parameter { name: "mesh"; type: "QAbstract3DSeries::Mesh" }
        }
        Method {
            name: "handleMeshSmoothChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "handleRowCountChanged" }
        Method { name: "handleColCountChanged" }
        Method { name: "handleCameraRotationChanged" }
        Method { name: "handleArrayReset" }
        Method {
            name: "handleRowsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleItemChanged"
            Parameter { name: "rowIndex"; type: "int" }
            Parameter { name: "columnIndex"; type: "int" }
        }
        Method { name: "handleDataRowLabelsChanged" }
        Method { name: "handleDataColumnLabelsChanged" }
        Method { name: "handleRowColorsChanged" }
        Method {
            name: "addSeries"
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
        Method {
            name: "removeSeries"
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
        Method {
            name: "insertSeries"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "series"; type: "QBar3DSeries"; isPointer: true }
        }
        Method { name: "clearSelection" }
    }
    Component {
        file: "private/qquickgraphscolor_p.h"
        name: "QQuickGraphsColor"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/Color 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 0
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        file: "private/qquickgraphsitem_p.h"
        name: "QQuickGraphsItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DViewport"
        exports: [
            "QtGraphs/GraphsItem3D 6.0",
            "QtGraphs/GraphsItem3D 6.2",
            "QtGraphs/GraphsItem3D 6.3",
            "QtGraphs/GraphsItem3D 6.4",
            "QtGraphs/GraphsItem3D 6.6",
            "QtGraphs/GraphsItem3D 6.7"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [1536, 1538, 1539, 1540, 1542, 1543]
        Property {
            name: "selectionMode"
            type: "QAbstract3DGraph::SelectionFlags"
            read: "selectionMode"
            write: "setSelectionMode"
            notify: "selectionModeChanged"
            index: 0
        }
        Property {
            name: "shadowQuality"
            type: "QAbstract3DGraph::ShadowQuality"
            read: "shadowQuality"
            write: "setShadowQuality"
            notify: "shadowQualityChanged"
            index: 1
        }
        Property {
            name: "msaaSamples"
            type: "int"
            read: "msaaSamples"
            write: "setMsaaSamples"
            notify: "msaaSamplesChanged"
            index: 2
        }
        Property {
            name: "scene"
            type: "Q3DScene"
            isPointer: true
            read: "scene"
            notify: "sceneChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "inputHandler"
            type: "QAbstract3DInputHandler"
            isPointer: true
            read: "inputHandler"
            write: "setInputHandler"
            notify: "inputHandlerChanged"
            index: 4
        }
        Property {
            name: "theme"
            type: "Q3DTheme"
            isPointer: true
            read: "theme"
            write: "setTheme"
            notify: "themeChanged"
            index: 5
        }
        Property {
            name: "renderingMode"
            type: "QAbstract3DGraph::RenderingMode"
            read: "renderingMode"
            write: "setRenderingMode"
            notify: "renderingModeChanged"
            index: 6
        }
        Property {
            name: "measureFps"
            type: "bool"
            read: "measureFps"
            write: "setMeasureFps"
            notify: "measureFpsChanged"
            index: 7
        }
        Property {
            name: "currentFps"
            type: "int"
            read: "currentFps"
            notify: "currentFpsChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "customItemList"
            type: "QCustom3DItem"
            isList: true
            read: "customItemList"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "orthoProjection"
            type: "bool"
            read: "isOrthoProjection"
            write: "setOrthoProjection"
            notify: "orthoProjectionChanged"
            index: 10
        }
        Property {
            name: "selectedElement"
            type: "QAbstract3DGraph::ElementType"
            read: "selectedElement"
            notify: "selectedElementChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "aspectRatio"
            type: "double"
            read: "aspectRatio"
            write: "setAspectRatio"
            notify: "aspectRatioChanged"
            index: 12
        }
        Property {
            name: "optimizationHint"
            type: "QAbstract3DGraph::OptimizationHint"
            read: "optimizationHint"
            write: "setOptimizationHint"
            notify: "optimizationHintChanged"
            index: 13
        }
        Property {
            name: "polar"
            type: "bool"
            read: "isPolar"
            write: "setPolar"
            notify: "polarChanged"
            index: 14
        }
        Property {
            name: "radialLabelOffset"
            type: "float"
            read: "radialLabelOffset"
            write: "setRadialLabelOffset"
            notify: "radialLabelOffsetChanged"
            index: 15
        }
        Property {
            name: "horizontalAspectRatio"
            type: "double"
            read: "horizontalAspectRatio"
            write: "setHorizontalAspectRatio"
            notify: "horizontalAspectRatioChanged"
            index: 16
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            notify: "localeChanged"
            index: 17
        }
        Property {
            name: "queriedGraphPosition"
            type: "QVector3D"
            read: "queriedGraphPosition"
            notify: "queriedGraphPositionChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "margin"
            type: "double"
            read: "margin"
            write: "setMargin"
            notify: "marginChanged"
            index: 19
        }
        Property {
            name: "cameraXRotation"
            type: "float"
            read: "cameraXRotation"
            write: "setCameraXRotation"
            notify: "cameraXRotationChanged"
            index: 20
        }
        Property {
            name: "cameraYRotation"
            type: "float"
            read: "cameraYRotation"
            write: "setCameraYRotation"
            notify: "cameraYRotationChanged"
            index: 21
        }
        Property {
            name: "cameraZoomLevel"
            type: "float"
            read: "cameraZoomLevel"
            write: "setCameraZoomLevel"
            notify: "cameraZoomLevelChanged"
            index: 22
        }
        Property {
            name: "cameraPreset"
            type: "QAbstract3DGraph::CameraPreset"
            read: "cameraPreset"
            write: "setCameraPreset"
            notify: "cameraPresetChanged"
            index: 23
        }
        Property {
            name: "cameraTargetPosition"
            type: "QVector3D"
            read: "cameraTargetPosition"
            write: "setCameraTargetPosition"
            notify: "cameraTargetPositionChanged"
            index: 24
        }
        Property {
            name: "minCameraZoomLevel"
            type: "float"
            read: "minCameraZoomLevel"
            write: "setMinCameraZoomLevel"
            notify: "minCameraZoomLevelChanged"
            index: 25
        }
        Property {
            name: "maxCameraZoomLevel"
            type: "float"
            read: "maxCameraZoomLevel"
            write: "setMaxCameraZoomLevel"
            notify: "maxCameraZoomLevelChanged"
            index: 26
        }
        Property {
            name: "wrapCameraXRotation"
            type: "bool"
            read: "wrapCameraXRotation"
            write: "setWrapCameraXRotation"
            notify: "wrapCameraXRotationChanged"
            index: 27
        }
        Property {
            name: "wrapCameraYRotation"
            type: "bool"
            read: "wrapCameraYRotation"
            write: "setWrapCameraYRotation"
            notify: "wrapCameraYRotationChanged"
            index: 28
        }
        Signal {
            name: "selectionModeChanged"
            Parameter { name: "mode"; type: "QAbstract3DGraph::SelectionFlags" }
        }
        Signal {
            name: "shadowQualityChanged"
            Parameter { name: "quality"; type: "QAbstract3DGraph::ShadowQuality" }
        }
        Signal {
            name: "shadowsSupportedChanged"
            Parameter { name: "supported"; type: "bool" }
        }
        Signal {
            name: "msaaSamplesChanged"
            Parameter { name: "samples"; type: "int" }
        }
        Signal {
            name: "inputHandlerChanged"
            Parameter { name: "inputHandler"; type: "QAbstract3DInputHandler"; isPointer: true }
        }
        Signal {
            name: "themeChanged"
            Parameter { name: "theme"; type: "Q3DTheme"; isPointer: true }
        }
        Signal {
            name: "renderingModeChanged"
            Parameter { name: "mode"; type: "QAbstract3DGraph::RenderingMode" }
        }
        Signal {
            name: "measureFpsChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "currentFpsChanged"
            Parameter { name: "fps"; type: "int" }
        }
        Signal {
            name: "selectedElementChanged"
            Parameter { name: "type"; type: "QAbstract3DGraph::ElementType" }
        }
        Signal {
            name: "orthoProjectionChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "aspectRatioChanged"
            Parameter { name: "ratio"; type: "double" }
        }
        Signal {
            name: "optimizationHintChanged"
            Parameter { name: "hint"; type: "QAbstract3DGraph::OptimizationHint" }
        }
        Signal {
            name: "polarChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "radialLabelOffsetChanged"
            Parameter { name: "offset"; type: "float" }
        }
        Signal {
            name: "horizontalAspectRatioChanged"
            Parameter { name: "ratio"; type: "double" }
        }
        Signal {
            name: "localeChanged"
            Parameter { name: "locale"; type: "QLocale" }
        }
        Signal {
            name: "queriedGraphPositionChanged"
            Parameter { name: "data"; type: "QVector3D" }
        }
        Signal {
            name: "marginChanged"
            Parameter { name: "margin"; type: "double" }
        }
        Signal {
            name: "cameraPresetChanged"
            Parameter { name: "preset"; type: "QAbstract3DGraph::CameraPreset" }
        }
        Signal {
            name: "cameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "cameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "cameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "cameraTargetPositionChanged"
            Parameter { name: "target"; type: "QVector3D" }
        }
        Signal {
            name: "minCameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "maxCameraZoomLevelChanged"
            Parameter { name: "zoomLevel"; type: "float" }
        }
        Signal {
            name: "minCameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "minCameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "maxCameraXRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "maxCameraYRotationChanged"
            Parameter { name: "rotation"; type: "float" }
        }
        Signal {
            name: "wrapCameraXRotationChanged"
            Parameter { name: "wrap"; type: "bool" }
        }
        Signal {
            name: "wrapCameraYRotationChanged"
            Parameter { name: "wrap"; type: "bool" }
        }
        Signal { name: "needRender" }
        Signal { name: "themeTypeChanged" }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisZChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Signal {
            name: "activeThemeChanged"
            Parameter { name: "activeTheme"; type: "Q3DTheme"; isPointer: true }
        }
        Method {
            name: "handleAxisXChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisYChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisZChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method { name: "handleFpsChanged" }
        Method {
            name: "windowDestroyed"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "handleAxisTitleChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Method { name: "handleAxisLabelsChanged" }
        Method {
            name: "handleAxisRangeChanged"
            Parameter { name: "min"; type: "float" }
            Parameter { name: "max"; type: "float" }
        }
        Method {
            name: "handleAxisSegmentCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleAxisSubSegmentCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleAxisAutoAdjustRangeChanged"
            Parameter { name: "autoAdjust"; type: "bool" }
        }
        Method {
            name: "handleAxisLabelFormatChanged"
            Parameter { name: "format"; type: "QString" }
        }
        Method {
            name: "handleAxisReversedChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "handleAxisFormatterDirty" }
        Method {
            name: "handleAxisLabelAutoRotationChanged"
            Parameter { name: "angle"; type: "float" }
        }
        Method {
            name: "handleAxisTitleVisibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "handleAxisTitleFixedChanged"
            Parameter { name: "fixed"; type: "bool" }
        }
        Method {
            name: "handleInputViewChanged"
            Parameter { name: "view"; type: "QAbstract3DInputHandler::InputView" }
        }
        Method {
            name: "handleInputPositionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Method {
            name: "handleSeriesVisibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "handleThemeColorStyleChanged"
            Parameter { name: "style"; type: "Q3DTheme::ColorStyle" }
        }
        Method {
            name: "handleThemeBaseColorsChanged"
            Parameter { name: "color"; type: "QColor"; isList: true }
        }
        Method {
            name: "handleThemeBaseGradientsChanged"
            Parameter { name: "gradient"; type: "QLinearGradient"; isList: true }
        }
        Method {
            name: "handleThemeSingleHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "handleThemeSingleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Method {
            name: "handleThemeMultiHighlightColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "handleThemeMultiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QLinearGradient" }
        }
        Method {
            name: "handleThemeTypeChanged"
            Parameter { name: "theme"; type: "Q3DTheme::Theme" }
        }
        Method {
            name: "handleRequestShadowQuality"
            Parameter { name: "quality"; type: "QAbstract3DGraph::ShadowQuality" }
        }
        Method { name: "updateCustomItem" }
        Method {
            name: "hasSeries"
            type: "bool"
            Parameter { name: "series"; type: "QAbstract3DSeries"; isPointer: true }
        }
        Method { name: "clearSelection" }
        Method {
            name: "addCustomItem"
            type: "int"
            Parameter { name: "item"; type: "QCustom3DItem"; isPointer: true }
        }
        Method { name: "removeCustomItems" }
        Method {
            name: "removeCustomItem"
            Parameter { name: "item"; type: "QCustom3DItem"; isPointer: true }
        }
        Method {
            name: "removeCustomItemAt"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "releaseCustomItem"
            Parameter { name: "item"; type: "QCustom3DItem"; isPointer: true }
        }
        Method { name: "selectedLabelIndex"; type: "int" }
        Method { name: "selectedAxis"; type: "QAbstract3DAxis"; isPointer: true }
        Method { name: "selectedCustomItemIndex"; type: "int" }
        Method { name: "selectedCustomItem"; type: "QCustom3DItem"; isPointer: true }
    }
    Component {
        file: "private/qquickgraphsscatter_p.h"
        name: "QQuickGraphsScatter"
        accessSemantics: "reference"
        defaultProperty: "seriesList"
        prototype: "QQuickGraphsItem"
        exports: [
            "QtGraphs/Scatter3D 6.0",
            "QtGraphs/Scatter3D 6.2",
            "QtGraphs/Scatter3D 6.3",
            "QtGraphs/Scatter3D 6.4",
            "QtGraphs/Scatter3D 6.6",
            "QtGraphs/Scatter3D 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1538, 1539, 1540, 1542, 1543]
        Property {
            name: "axisX"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisX"
            write: "setAxisX"
            notify: "axisXChanged"
            index: 0
        }
        Property {
            name: "axisY"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisY"
            write: "setAxisY"
            notify: "axisYChanged"
            index: 1
        }
        Property {
            name: "axisZ"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisZ"
            write: "setAxisZ"
            notify: "axisZChanged"
            index: 2
        }
        Property {
            name: "selectedSeries"
            type: "QScatter3DSeries"
            isPointer: true
            read: "selectedSeries"
            notify: "selectedSeriesChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "seriesList"
            type: "QScatter3DSeries"
            isList: true
            read: "seriesList"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisZChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "selectedSeriesChanged"
            Parameter { name: "series"; type: "QScatter3DSeries"; isPointer: true }
        }
        Method {
            name: "handleAxisXChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisYChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisZChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method { name: "handleSeriesMeshChanged" }
        Method {
            name: "handleMeshSmoothChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "handleArrayReset" }
        Method {
            name: "handleItemsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleItemsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleItemsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleItemsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method { name: "cameraRotationChanged" }
        Method { name: "clearSelection" }
        Method {
            name: "addSeries"
            Parameter { name: "series"; type: "QScatter3DSeries"; isPointer: true }
        }
        Method {
            name: "removeSeries"
            Parameter { name: "series"; type: "QScatter3DSeries"; isPointer: true }
        }
    }
    Component {
        file: "private/qquickgraphsscatterseries_p.h"
        name: "QQuickGraphsScatter3DSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QScatter3DSeries"
        exports: ["QtGraphs/Scatter3DSeries 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "seriesChildren"
            type: "QObject"
            isList: true
            read: "seriesChildren"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baseGradient"
            type: "QJSValue"
            read: "baseGradient"
            write: "setBaseGradient"
            notify: "baseGradientChanged"
            index: 1
        }
        Property {
            name: "singleHighlightGradient"
            type: "QJSValue"
            read: "singleHighlightGradient"
            write: "setSingleHighlightGradient"
            notify: "singleHighlightGradientChanged"
            index: 2
        }
        Property {
            name: "multiHighlightGradient"
            type: "QJSValue"
            read: "multiHighlightGradient"
            write: "setMultiHighlightGradient"
            notify: "multiHighlightGradientChanged"
            index: 3
        }
        Property {
            name: "invalidSelectionIndex"
            type: "int"
            read: "invalidSelectionIndex"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "baseGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "singleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "multiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Method { name: "handleBaseGradientUpdate" }
        Method { name: "handleSingleHighlightGradientUpdate" }
        Method { name: "handleMultiHighlightGradientUpdate" }
    }
    Component {
        file: "private/qquickgraphssurface_p.h"
        name: "QQuickGraphsSurface"
        accessSemantics: "reference"
        defaultProperty: "seriesList"
        prototype: "QQuickGraphsItem"
        exports: [
            "QtGraphs/Surface3D 6.0",
            "QtGraphs/Surface3D 6.2",
            "QtGraphs/Surface3D 6.3",
            "QtGraphs/Surface3D 6.4",
            "QtGraphs/Surface3D 6.6",
            "QtGraphs/Surface3D 6.7"
        ]
        exportMetaObjectRevisions: [1536, 1538, 1539, 1540, 1542, 1543]
        Property {
            name: "axisX"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisX"
            write: "setAxisX"
            notify: "axisXChanged"
            index: 0
        }
        Property {
            name: "axisY"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisY"
            write: "setAxisY"
            notify: "axisYChanged"
            index: 1
        }
        Property {
            name: "axisZ"
            type: "QValue3DAxis"
            isPointer: true
            read: "axisZ"
            write: "setAxisZ"
            notify: "axisZChanged"
            index: 2
        }
        Property {
            name: "selectedSeries"
            type: "QSurface3DSeries"
            isPointer: true
            read: "selectedSeries"
            notify: "selectedSeriesChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "seriesList"
            type: "QSurface3DSeries"
            isList: true
            read: "seriesList"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flipHorizontalGrid"
            type: "bool"
            read: "flipHorizontalGrid"
            write: "setFlipHorizontalGrid"
            notify: "flipHorizontalGridChanged"
            index: 5
        }
        Signal {
            name: "axisXChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisYChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "axisZChanged"
            Parameter { name: "axis"; type: "QValue3DAxis"; isPointer: true }
        }
        Signal {
            name: "selectedSeriesChanged"
            Parameter { name: "series"; type: "QSurface3DSeries"; isPointer: true }
        }
        Signal {
            name: "flipHorizontalGridChanged"
            Parameter { name: "flip"; type: "bool" }
        }
        Method {
            name: "handleAxisXChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisYChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method {
            name: "handleAxisZChanged"
            Parameter { name: "axis"; type: "QAbstract3DAxis"; isPointer: true }
        }
        Method { name: "handleFlatShadingEnabledChanged" }
        Method { name: "handleWireframeColorChanged" }
        Method {
            name: "handleFlipHorizontalGridChanged"
            Parameter { name: "flip"; type: "bool" }
        }
        Method { name: "handleArrayReset" }
        Method {
            name: "handleRowsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleRowsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "handleItemChanged"
            Parameter { name: "rowIndex"; type: "int" }
            Parameter { name: "columnIndex"; type: "int" }
        }
        Method {
            name: "handleFlatShadingSupportedChange"
            Parameter { name: "supported"; type: "bool" }
        }
        Method {
            name: "addSeries"
            Parameter { name: "series"; type: "QSurface3DSeries"; isPointer: true }
        }
        Method {
            name: "removeSeries"
            Parameter { name: "series"; type: "QSurface3DSeries"; isPointer: true }
        }
        Method { name: "clearSelection" }
    }
    Component {
        file: "private/qquickgraphssurfaceseries_p.h"
        name: "QQuickGraphsSurface3DSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QSurface3DSeries"
        exports: ["QtGraphs/Surface3DSeries 6.0"]
        exportMetaObjectRevisions: [1536]
        Property {
            name: "seriesChildren"
            type: "QObject"
            isList: true
            read: "seriesChildren"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selectedPoint"
            type: "QPointF"
            read: "selectedPoint"
            write: "setSelectedPoint"
            notify: "selectedPointChanged"
            index: 1
        }
        Property {
            name: "invalidSelectionPosition"
            type: "QPointF"
            read: "invalidSelectionPosition"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baseGradient"
            type: "QJSValue"
            read: "baseGradient"
            write: "setBaseGradient"
            notify: "baseGradientChanged"
            index: 3
        }
        Property {
            name: "singleHighlightGradient"
            type: "QJSValue"
            read: "singleHighlightGradient"
            write: "setSingleHighlightGradient"
            notify: "singleHighlightGradientChanged"
            index: 4
        }
        Property {
            name: "multiHighlightGradient"
            type: "QJSValue"
            read: "multiHighlightGradient"
            write: "setMultiHighlightGradient"
            notify: "multiHighlightGradientChanged"
            index: 5
        }
        Signal {
            name: "selectedPointChanged"
            Parameter { name: "position"; type: "QPointF" }
        }
        Signal {
            name: "baseGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "singleHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Signal {
            name: "multiHighlightGradientChanged"
            Parameter { name: "gradient"; type: "QJSValue" }
        }
        Method { name: "handleBaseGradientUpdate" }
        Method { name: "handleSingleHighlightGradientUpdate" }
        Method { name: "handleMultiHighlightGradientUpdate" }
    }
    Component {
        file: "qquickwidget.h"
        name: "QQuickWidget"
        accessSemantics: "reference"
        prototype: "QWidget"
        Enum {
            name: "ResizeMode"
            values: ["SizeViewToRootObject", "SizeRootObjectToView"]
        }
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property {
            name: "resizeMode"
            type: "ResizeMode"
            read: "resizeMode"
            write: "setResizeMode"
            index: 0
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 1
            isReadonly: true
        }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource"; index: 2 }
        Signal {
            name: "statusChanged"
            Parameter { type: "QQuickWidget::Status" }
        }
        Signal {
            name: "sceneGraphError"
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "setSource"
            Parameter { type: "QUrl" }
        }
        Method {
            name: "setContent"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method { name: "continueExecute" }
        Method { name: "createFramebufferObject" }
        Method { name: "destroyFramebufferObject" }
        Method { name: "triggerUpdate" }
        Method {
            name: "propagateFocusObjectChanged"
            Parameter { name: "focusObject"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/foreigntypesscatter_p.h"
        name: "QScatter3DSeries"
        accessSemantics: "reference"
        prototype: "QAbstract3DSeries"
        exports: ["QtGraphs/QScatter3DSeries 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Property {
            name: "dataProxy"
            type: "QScatterDataProxy"
            isPointer: true
            read: "dataProxy"
            write: "setDataProxy"
            notify: "dataProxyChanged"
            index: 0
        }
        Property {
            name: "selectedItem"
            type: "int"
            read: "selectedItem"
            write: "setSelectedItem"
            notify: "selectedItemChanged"
            index: 1
        }
        Property {
            name: "itemSize"
            type: "float"
            read: "itemSize"
            write: "setItemSize"
            notify: "itemSizeChanged"
            index: 2
        }
        Signal {
            name: "dataProxyChanged"
            Parameter { name: "proxy"; type: "QScatterDataProxy"; isPointer: true }
        }
        Signal {
            name: "selectedItemChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "itemSizeChanged"
            Parameter { name: "size"; type: "float" }
        }
    }
    Component {
        file: "private/foreigntypesscatter_p.h"
        name: "QScatterDataProxy"
        accessSemantics: "reference"
        prototype: "QAbstractDataProxy"
        exports: ["QtGraphs/ScatterDataProxy 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Property {
            name: "itemCount"
            type: "int"
            read: "itemCount"
            notify: "itemCountChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "series"
            type: "QScatter3DSeries"
            isPointer: true
            read: "series"
            notify: "seriesChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "arrayReset" }
        Signal {
            name: "itemsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "seriesChanged"
            Parameter { name: "series"; type: "QScatter3DSeries"; isPointer: true }
        }
    }
    Component {
        file: "qscatterseries.h"
        name: "QScatterSeries"
        accessSemantics: "reference"
        prototype: "QXYSeries"
        exports: ["QtGraphs/ScatterSeries 6.0"]
        exportMetaObjectRevisions: [1536]
    }
    Component {
        file: "qseriestheme.h"
        name: "QSeriesTheme"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["QtGraphs/SeriesTheme 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "SeriesColorTheme"
            values: ["SeriesTheme1", "SeriesTheme2"]
        }
        Property {
            name: "colorTheme"
            type: "SeriesColorTheme"
            read: "colorTheme"
            write: "setColorTheme"
            notify: "colorThemeChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "colors"
            type: "QColor"
            isList: true
            read: "colors"
            write: "setColors"
            notify: "colorsChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "borderColors"
            type: "QColor"
            isList: true
            read: "borderColors"
            write: "setBorderColors"
            notify: "borderColorsChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "borderWidth"
            type: "double"
            read: "borderWidth"
            write: "setBorderWidth"
            notify: "borderWidthChanged"
            index: 3
            isFinal: true
        }
        Signal { name: "update" }
        Signal { name: "colorThemeChanged" }
        Signal { name: "colorsChanged" }
        Signal { name: "borderColorsChanged" }
        Signal { name: "borderWidthChanged" }
    }
    Component {
        file: "private/foreigntypessurface_p.h"
        name: "QSurface3DSeries"
        accessSemantics: "reference"
        prototype: "QAbstract3DSeries"
        exports: ["QtGraphs/QSurface3DSeries 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Enum {
            name: "DrawFlag"
            isFlag: true
            values: [
                "DrawWireframe",
                "DrawSurface",
                "DrawSurfaceAndWireframe"
            ]
        }
        Property {
            name: "dataProxy"
            type: "QSurfaceDataProxy"
            isPointer: true
            read: "dataProxy"
            write: "setDataProxy"
            notify: "dataProxyChanged"
            index: 0
        }
        Property {
            name: "selectedPoint"
            type: "QPoint"
            read: "selectedPoint"
            write: "setSelectedPoint"
            notify: "selectedPointChanged"
            index: 1
        }
        Property {
            name: "flatShadingEnabled"
            type: "bool"
            read: "isFlatShadingEnabled"
            write: "setFlatShadingEnabled"
            notify: "flatShadingEnabledChanged"
            index: 2
        }
        Property {
            name: "flatShadingSupported"
            type: "bool"
            read: "isFlatShadingSupported"
            notify: "flatShadingSupportedChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "drawMode"
            type: "QSurface3DSeries::DrawFlags"
            read: "drawMode"
            write: "setDrawMode"
            notify: "drawModeChanged"
            index: 4
        }
        Property {
            name: "texture"
            type: "QImage"
            read: "texture"
            write: "setTexture"
            notify: "textureChanged"
            index: 5
        }
        Property {
            name: "textureFile"
            type: "QString"
            read: "textureFile"
            write: "setTextureFile"
            notify: "textureFileChanged"
            index: 6
        }
        Property {
            name: "wireframeColor"
            type: "QColor"
            read: "wireframeColor"
            write: "setWireframeColor"
            notify: "wireframeColorChanged"
            index: 7
        }
        Signal {
            name: "dataProxyChanged"
            Parameter { name: "proxy"; type: "QSurfaceDataProxy"; isPointer: true }
        }
        Signal {
            name: "selectedPointChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "flatShadingEnabledChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "flatShadingSupportedChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "drawModeChanged"
            Parameter { name: "mode"; type: "QSurface3DSeries::DrawFlags" }
        }
        Signal {
            name: "textureChanged"
            Parameter { name: "image"; type: "QImage" }
        }
        Signal {
            name: "textureFileChanged"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal {
            name: "wireframeColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        file: "private/foreigntypessurface_p.h"
        name: "QSurfaceDataProxy"
        accessSemantics: "reference"
        prototype: "QAbstractDataProxy"
        exports: ["QtGraphs/SurfaceDataProxy 6.6"]
        isCreatable: false
        exportMetaObjectRevisions: [1542]
        Property {
            name: "rowCount"
            type: "int"
            read: "rowCount"
            notify: "rowCountChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "columnCount"
            type: "int"
            read: "columnCount"
            notify: "columnCountChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "series"
            type: "QSurface3DSeries"
            isPointer: true
            read: "series"
            notify: "seriesChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "arrayReset" }
        Signal {
            name: "rowsAdded"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsChanged"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "startIndex"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "rowIndex"; type: "int" }
            Parameter { name: "columnIndex"; type: "int" }
        }
        Signal {
            name: "rowCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "columnCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "seriesChanged"
            Parameter { name: "series"; type: "QSurface3DSeries"; isPointer: true }
        }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QTouch3DInputHandler"
        accessSemantics: "none"
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QValue3DAxisFormatter"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/ValueAxis3DFormatter 6.6"]
        exportMetaObjectRevisions: [1542]
        Method { name: "markDirtyNoLabelChange" }
    }
    Component {
        file: "private/foreigntypes_p.h"
        name: "QValue3DAxis"
        accessSemantics: "reference"
        prototype: "QAbstract3DAxis"
        exports: ["QtGraphs/ValueAxis3D 6.6"]
        exportMetaObjectRevisions: [1542]
        Property {
            name: "segmentCount"
            type: "int"
            read: "segmentCount"
            write: "setSegmentCount"
            notify: "segmentCountChanged"
            index: 0
        }
        Property {
            name: "subSegmentCount"
            type: "int"
            read: "subSegmentCount"
            write: "setSubSegmentCount"
            notify: "subSegmentCountChanged"
            index: 1
        }
        Property {
            name: "labelFormat"
            type: "QString"
            read: "labelFormat"
            write: "setLabelFormat"
            notify: "labelFormatChanged"
            index: 2
        }
        Property {
            name: "formatter"
            type: "QValue3DAxisFormatter"
            isPointer: true
            read: "formatter"
            write: "setFormatter"
            notify: "formatterChanged"
            index: 3
        }
        Property {
            name: "reversed"
            type: "bool"
            read: "reversed"
            write: "setReversed"
            notify: "reversedChanged"
            index: 4
        }
        Signal {
            name: "segmentCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "subSegmentCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "labelFormatChanged"
            Parameter { name: "format"; type: "QString" }
        }
        Signal {
            name: "formatterChanged"
            Parameter { name: "formatter"; type: "QValue3DAxisFormatter"; isPointer: true }
        }
        Signal {
            name: "reversedChanged"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal { name: "formatterDirty" }
    }
    Component {
        file: "qvalueaxis.h"
        name: "QValueAxis"
        accessSemantics: "reference"
        prototype: "QAbstractAxis"
        exports: ["QtGraphs/ValueAxis 6.0"]
        exportMetaObjectRevisions: [1536]
        Property { name: "min"; type: "double"; read: "min"; write: "setMin"; notify: "minChanged"; index: 0 }
        Property { name: "max"; type: "double"; read: "max"; write: "setMax"; notify: "maxChanged"; index: 1 }
        Property {
            name: "labelFormat"
            type: "QString"
            read: "labelFormat"
            write: "setLabelFormat"
            notify: "labelFormatChanged"
            index: 2
        }
        Property {
            name: "labelDecimals"
            type: "int"
            read: "labelDecimals"
            write: "setLabelDecimals"
            notify: "labelDecimalsChanged"
            index: 3
        }
        Property {
            name: "minorTickCount"
            type: "int"
            read: "minorTickCount"
            write: "setMinorTickCount"
            notify: "minorTickCountChanged"
            index: 4
        }
        Property {
            name: "tickAnchor"
            type: "double"
            read: "tickAnchor"
            write: "setTickAnchor"
            notify: "tickAnchorChanged"
            index: 5
        }
        Property {
            name: "tickInterval"
            type: "double"
            read: "tickInterval"
            write: "setTickInterval"
            notify: "tickIntervalChanged"
            index: 6
        }
        Signal {
            name: "minChanged"
            Parameter { name: "min"; type: "double" }
        }
        Signal {
            name: "maxChanged"
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "min"; type: "double" }
            Parameter { name: "max"; type: "double" }
        }
        Signal {
            name: "minorTickCountChanged"
            Parameter { name: "tickCount"; type: "int" }
        }
        Signal {
            name: "labelFormatChanged"
            Parameter { name: "format"; type: "QString" }
        }
        Signal {
            name: "labelDecimalsChanged"
            Parameter { name: "decimals"; type: "int" }
        }
        Signal {
            name: "tickAnchorChanged"
            Parameter { name: "tickAnchor"; type: "double" }
        }
        Signal {
            name: "tickIntervalChanged"
            Parameter { name: "tickInterval"; type: "double" }
        }
    }
    Component {
        file: "qwidget.h"
        name: "QWidget"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "modal"; type: "bool"; read: "isModal"; index: 0; isReadonly: true }
        Property {
            name: "windowModality"
            type: "Qt::WindowModality"
            read: "windowModality"
            write: "setWindowModality"
            index: 1
        }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled"; index: 2 }
        Property { name: "geometry"; type: "QRect"; read: "geometry"; write: "setGeometry"; index: 3 }
        Property { name: "frameGeometry"; type: "QRect"; read: "frameGeometry"; index: 4; isReadonly: true }
        Property {
            name: "normalGeometry"
            type: "QRect"
            read: "normalGeometry"
            index: 5
            isReadonly: true
        }
        Property { name: "x"; type: "int"; read: "x"; index: 6; isReadonly: true }
        Property { name: "y"; type: "int"; read: "y"; index: 7; isReadonly: true }
        Property { name: "pos"; type: "QPoint"; read: "pos"; write: "move"; index: 8 }
        Property { name: "frameSize"; type: "QSize"; read: "frameSize"; index: 9; isReadonly: true }
        Property { name: "size"; type: "QSize"; read: "size"; write: "resize"; index: 10 }
        Property { name: "width"; type: "int"; read: "width"; index: 11; isReadonly: true }
        Property { name: "height"; type: "int"; read: "height"; index: 12; isReadonly: true }
        Property { name: "rect"; type: "QRect"; read: "rect"; index: 13; isReadonly: true }
        Property { name: "childrenRect"; type: "QRect"; read: "childrenRect"; index: 14; isReadonly: true }
        Property {
            name: "childrenRegion"
            type: "QRegion"
            read: "childrenRegion"
            index: 15
            isReadonly: true
        }
        Property {
            name: "sizePolicy"
            type: "QSizePolicy"
            read: "sizePolicy"
            write: "setSizePolicy"
            index: 16
        }
        Property {
            name: "minimumSize"
            type: "QSize"
            read: "minimumSize"
            write: "setMinimumSize"
            index: 17
        }
        Property {
            name: "maximumSize"
            type: "QSize"
            read: "maximumSize"
            write: "setMaximumSize"
            index: 18
        }
        Property {
            name: "minimumWidth"
            type: "int"
            read: "minimumWidth"
            write: "setMinimumWidth"
            index: 19
        }
        Property {
            name: "minimumHeight"
            type: "int"
            read: "minimumHeight"
            write: "setMinimumHeight"
            index: 20
        }
        Property {
            name: "maximumWidth"
            type: "int"
            read: "maximumWidth"
            write: "setMaximumWidth"
            index: 21
        }
        Property {
            name: "maximumHeight"
            type: "int"
            read: "maximumHeight"
            write: "setMaximumHeight"
            index: 22
        }
        Property {
            name: "sizeIncrement"
            type: "QSize"
            read: "sizeIncrement"
            write: "setSizeIncrement"
            index: 23
        }
        Property { name: "baseSize"; type: "QSize"; read: "baseSize"; write: "setBaseSize"; index: 24 }
        Property { name: "palette"; type: "QPalette"; read: "palette"; write: "setPalette"; index: 25 }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont"; index: 26 }
        Property {
            name: "cursor"
            type: "QCursor"
            read: "cursor"
            write: "setCursor"
            reset: "unsetCursor"
            index: 27
        }
        Property {
            name: "mouseTracking"
            type: "bool"
            read: "hasMouseTracking"
            write: "setMouseTracking"
            index: 28
        }
        Property {
            name: "tabletTracking"
            type: "bool"
            read: "hasTabletTracking"
            write: "setTabletTracking"
            index: 29
        }
        Property {
            name: "isActiveWindow"
            type: "bool"
            read: "isActiveWindow"
            index: 30
            isReadonly: true
        }
        Property {
            name: "focusPolicy"
            type: "Qt::FocusPolicy"
            read: "focusPolicy"
            write: "setFocusPolicy"
            index: 31
        }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; index: 32; isReadonly: true }
        Property {
            name: "contextMenuPolicy"
            type: "Qt::ContextMenuPolicy"
            read: "contextMenuPolicy"
            write: "setContextMenuPolicy"
            index: 33
        }
        Property {
            name: "updatesEnabled"
            type: "bool"
            read: "updatesEnabled"
            write: "setUpdatesEnabled"
            index: 34
        }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible"; index: 35 }
        Property { name: "minimized"; type: "bool"; read: "isMinimized"; index: 36; isReadonly: true }
        Property { name: "maximized"; type: "bool"; read: "isMaximized"; index: 37; isReadonly: true }
        Property { name: "fullScreen"; type: "bool"; read: "isFullScreen"; index: 38; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize"; read: "sizeHint"; index: 39; isReadonly: true }
        Property {
            name: "minimumSizeHint"
            type: "QSize"
            read: "minimumSizeHint"
            index: 40
            isReadonly: true
        }
        Property {
            name: "acceptDrops"
            type: "bool"
            read: "acceptDrops"
            write: "setAcceptDrops"
            index: 41
        }
        Property {
            name: "windowTitle"
            type: "QString"
            read: "windowTitle"
            write: "setWindowTitle"
            notify: "windowTitleChanged"
            index: 42
        }
        Property {
            name: "windowIcon"
            type: "QIcon"
            read: "windowIcon"
            write: "setWindowIcon"
            notify: "windowIconChanged"
            index: 43
        }
        Property {
            name: "windowIconText"
            type: "QString"
            read: "windowIconText"
            write: "setWindowIconText"
            notify: "windowIconTextChanged"
            index: 44
        }
        Property {
            name: "windowOpacity"
            type: "double"
            read: "windowOpacity"
            write: "setWindowOpacity"
            index: 45
        }
        Property {
            name: "windowModified"
            type: "bool"
            read: "isWindowModified"
            write: "setWindowModified"
            index: 46
        }
        Property { name: "toolTip"; type: "QString"; read: "toolTip"; write: "setToolTip"; index: 47 }
        Property {
            name: "toolTipDuration"
            type: "int"
            read: "toolTipDuration"
            write: "setToolTipDuration"
            index: 48
        }
        Property { name: "statusTip"; type: "QString"; read: "statusTip"; write: "setStatusTip"; index: 49 }
        Property { name: "whatsThis"; type: "QString"; read: "whatsThis"; write: "setWhatsThis"; index: 50 }
        Property {
            name: "accessibleName"
            type: "QString"
            read: "accessibleName"
            write: "setAccessibleName"
            index: 51
        }
        Property {
            name: "accessibleDescription"
            type: "QString"
            read: "accessibleDescription"
            write: "setAccessibleDescription"
            index: 52
        }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
            reset: "unsetLayoutDirection"
            index: 53
        }
        Property {
            name: "autoFillBackground"
            type: "bool"
            read: "autoFillBackground"
            write: "setAutoFillBackground"
            index: 54
        }
        Property {
            name: "styleSheet"
            type: "QString"
            read: "styleSheet"
            write: "setStyleSheet"
            index: 55
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            reset: "unsetLocale"
            index: 56
        }
        Property {
            name: "windowFilePath"
            type: "QString"
            read: "windowFilePath"
            write: "setWindowFilePath"
            index: 57
        }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
            index: 58
        }
        Signal {
            name: "windowTitleChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "windowIconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "windowIconTextChanged"
            Parameter { name: "iconText"; type: "QString" }
        }
        Signal {
            name: "customContextMenuRequested"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDisabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowModified"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setStyleSheet"
            Parameter { name: "styleSheet"; type: "QString" }
        }
        Method { name: "setFocus" }
        Method { name: "update" }
        Method { name: "repaint" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "updateMicroFocus"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
        }
        Method { name: "updateMicroFocus"; isCloned: true }
        Method { name: "_q_showIfNotHidden" }
        Method { name: "_q_closestWindowHandle"; type: "QWindow"; isPointer: true }
        Method {
            name: "grab"
            type: "QPixmap"
            Parameter { name: "rectangle"; type: "QRect" }
        }
        Method { name: "grab"; type: "QPixmap"; isCloned: true }
    }
    Component {
        file: "private/qxypoint_p.h"
        name: "QXYPoint"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtGraphs/XYPoint 1.0", "QtGraphs/XYPoint 6.0"]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "x"; type: "double"; read: "x"; write: "setX"; index: 0 }
        Property { name: "y"; type: "double"; read: "y"; write: "setY"; index: 1 }
    }
    Component {
        file: "qxyseries.h"
        name: "QXYSeries"
        accessSemantics: "reference"
        defaultProperty: "seriesChildren"
        prototype: "QAbstractSeries"
        Property {
            name: "axisX"
            type: "QAbstractAxis"
            isPointer: true
            read: "axisX"
            write: "setAxisX"
            notify: "axisXChanged"
            index: 0
        }
        Property {
            name: "axisY"
            type: "QAbstractAxis"
            isPointer: true
            read: "axisY"
            write: "setAxisY"
            notify: "axisYChanged"
            index: 1
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 2
        }
        Property {
            name: "selectedColor"
            type: "QColor"
            read: "selectedColor"
            write: "setSelectedColor"
            notify: "selectedColorChanged"
            index: 3
        }
        Property {
            name: "markerSize"
            type: "double"
            read: "markerSize"
            write: "setMarkerSize"
            notify: "markerSizeChanged"
            index: 4
        }
        Property {
            name: "pointMarker"
            type: "QQmlComponent"
            isPointer: true
            read: "pointMarker"
            write: "setPointMarker"
            notify: "pointMarkerChanged"
            index: 5
            isFinal: true
        }
        Signal {
            name: "pointReplaced"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "pointRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "pointAdded"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "selectedColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal { name: "pointsReplaced" }
        Signal {
            name: "pointsRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Signal { name: "selectedPointsChanged" }
        Signal {
            name: "markerSizeChanged"
            Parameter { name: "size"; type: "double" }
        }
        Signal { name: "axisXChanged" }
        Signal { name: "axisYChanged" }
        Signal { name: "pointMarkerChanged" }
    }
}
